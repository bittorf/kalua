#!/bin/sh
#
# _scheduler add "_firmware wget_prepare_for_lowmem_devices; wget -O /tmp/fw '$URL'"
# _scheduler add "_firmware burn /tmp/fw"

log()
{
	logger -s "$0: $1"
}

uptime_in_seconds()
{
	cut -d'.' -f1 /proc/uptime
}


[ "$USER" = "root" ] || {
	log "[ERR] user = $USER: seems we are in cross compiling stage?"
	exit 0
}

jffs2_is_ready()
{
	[ -e "/etc/init.d/apply_profile" ] || {
		log "already applied profile, filesystem should be ok"
		return 0
	}

	[ $( uptime_in_seconds ) -gt 240 ] && {
		return 0
	}

	logread | grep -q "jffs2_build_xattr_subsystem: complete building xattr subsystem" && {
		touch "/tmp/JFFS2_OK"
	}

	test -e "/tmp/JFFS2_OK"
}

while ! jffs2_is_ready ; do {
	log "waiting for JFFS2 to be ready"
	sleep 1
} done
log "uptime now: $( uptime_in_seconds ) seconds"


if   dmesg | fgrep -q "Linksys WRT54G/GS/GL" ; then	# brcm47xx
	HARDWARE="Linksys WRT54G/GS/GL"
elif dmesg | fgrep -q "Ubiquiti Bullet M" ; then	# ar71xx
	HARDWARE="BulletM"
elif dmesg | fgrep -q "TP-LINK TL-WR1043ND"; then	# ar71xx
	HARDWARE="TP-LINK TL-WR1043ND"
elif dmesg | fgrep -q "Buffalo WHR-HP-G54" ; then	# brcm47xx
	HARDWARE="Buffalo WHR-HP-G54"
elif dmesg | fgrep -q "SPW500V" ; then			# ???????? / speedport w500v / aldi router
	HARDWARE="SPW500V"
elif dmesg | fgrep -q "ASUS WL-HDD"; then		# brcm47xx
	HARDWARE="ASUS WL-HDD"
elif dmesg | fgrep -q "ASUS WL-500g Premium V2"; then	# brcm47xx / v2
	HARDWARE="ASUS WL-500g Premium V2"
elif dmesg | fgrep -q "ASUS WL-500g Premium"; then	# brcm47xx / v1
	HARDWARE="ASUS WL-500g Premium"
elif dmesg | fgrep -q "Dell TrueMobile 2300"; then	# brcm47xx / v1
	HARDWARE="Dell TrueMobile 2300"
else
	log "could not detect hardware, abort"

	[ "$1" = "help" ] || exit 1
fi
log "detected: $HARDWARE"


INSTALLATION="$1"
PROFILE_MODE="$2"
NODENUMBER="$3"
GATEWAY="$4"


[ "$INSTALLATION" = "?" ] || {
 SIM_ARG1="$( uci get system.@profile[0].name | cut -d'_' -f1 )"
 SIM_ARG2="$( uci get wireless.@wifi-iface[0].mode )"
 SIM_ARG3="$( uci get system.@profile[0].nodenumber )"
}

has_default_route ()
{
	[ -e /sbin/route ] && {
		route | grep -q ^default && return 0
	}

	[ -n "$( ip route list exact 0.0.0.0/0 )" ] && {
		return 0
	}

	return 1
}

has_default_route && {
	[ "$( uci get network.wan.proto )" = "dhcp" ] && {
		SIM_ARG4="dhcp"		# auf masq=1 testen?
	}
}



#######################################
#
# enforcing a profile (uncomment!)
#
#SIM_ARG1="olympia"
#SIM_ARG2="adhoc"
#SIM_ARG3=2		# 2,3,4,...,n (number 1 is reserved for vpn-server)
#SIM_ARG4=""
#[ "$SIM_ARG3" = "2" ] && SIM_ARG4="dhcp"
#
#######################################



[ -n "$SIM_ARG1" -a -n "$SIM_ARG2" -a -n "$SIM_ARG3" -a -z "$PROFILE_MODE" ] && {
	echo "detected already set values:"
	echo "INSTALLATION: $SIM_ARG1"
	echo "PROFILE_MODE: $SIM_ARG2"
	echo "NODENUMBER: $SIM_ARG3"
	echo "GATEWAY: $SIM_ARG4"
	echo

	[ "$1" = "boot" ] || {
		echo "press <enter> to continue/reapply these values or strg+c to abort"
		[ "$1" = "boot" ] || read DUMMY
	}

	INSTALLATION=$SIM_ARG1
	PROFILE_MODE=$SIM_ARG2
	NODENUMBER=$SIM_ARG3
	GATEWAY=$SIM_ARG4
}

[ -z "$NODENUMBER" -o -z "$INSTALLATION" -o -z "$PROFILE_MODE" -o "$INSTALLATION" = "?" ] && {
	echo "Usage: $0 <installation> <adhoc|ap|hybrid> <nodenumber> <gateway|dhcp|empty>"
	echo
	echo "		 installation = {"

	grep ^"	[a-z0-9|]*)" $0 | sed 's/)//g' | while read line; do echo "					$line"; done

	echo "				}"

	exit 1
}

case "$PROFILE_MODE" in
	ap|adhoc|hybrid)
		log "[OK] mode '$PROFILE_MODE' is valid"
	;;
	*)
		log "abort, mode must be one of [ap|adhoc|hybrid]"
		exit 1
	;;
esac

if [ -e /tmp/LOCKFILE_APPLY ]; then
	log "abort: /tmp/LOCKFILE_APPLY exists"
	exit 1
else
	touch /tmp/LOCKFILE_APPLY
fi

password_set()
{
	local PASSWORD="${1:-admin}"

	log "password_set() to '$PASSWORD'"
	sh -c "echo '$PASSWORD'; sleep 1; echo '$PASSWORD'" | passwd>/dev/null 2>&1
	log "password_set() [OK]"

	which dropbear >/dev/null || {
		log "missing dropbear, allowing telnet login permanentely in /bin/login.sh"
		sed -i 's/exit 0/# exit 0/' /bin/login.sh
	}
}


. ${0}.profile_definitions



OLD_HOSTNAME="$( uci get system.@system[0].hostname )"

case "$OLD_HOSTNAME" in
	*Dach*|*dach*|*unten*|*strasse*|*berg*|*MESH|*AP|*mesh|*ap|*NEU|*neu)
		log "leaving hostname $OLD_HOSTNAME"
	;;
	*)
		OLD_HOSTNAME="${INSTALLATION}-${PROFILE_MODE}-${GATEWAY}-${NODENUMBER}"
		log "using new hostname $OLD_HOSTNAME"
	;;
esac

echo "$OLD_HOSTNAME" >/proc/sys/kernel/hostname


[ "$( logread | grep "init: process '/bin/ash" | grep "exited. Scheduling for restart." | wc -l )" -gt 10 ] && {

	# daemon.info init: starting pid 15022, tty '/dev/ttyS0': '/bin/ash --login'		// should correctly detect 'ttyS0'

	log "detect_respawing_login daemon alert deactive ttyS0 in /etc/inittab"
	sed -i 's/^ttyS0/# ttyS0/' /etc/inittab
	kill -HUP 1	# forced process "init" to reload it's config-file
}


_config_polipo ()
{
	local net_allowed="10.0.0.0/8"		# fixme! hardcoded (restrict to HNA4?)
	local dropfile="/etc/hosts.drop"
	local cache_path="/tmp/usb0"

	cat >/etc/config/polipo <<EOF
config 'polipo' 'daemon'
	option 'daemonise' '1'
	option 'pidFile' '/var/run/polipo.pid'

config 'polipo' 'general'
	option 'enabled' '1'
	# adress on which polipo will listen, 0.0.0.0 means all addresses
	option 'proxyAddress' '0.0.0.0'
	option 'proxyPort' '8123'
	list 'allowedClients' '$net_allowed'
	# how much RAM memory should Polipo use (in bytes).
	option 'chunkHighMark' '1048576'
	# enable disk cache index and serverlist of integrated polipo web interface
	#option 'disableIndexing' '0'
	#option 'disableServersList' '0'
	# disable loging to syslog 
	# option 'logSyslog' '0'
	# set log file location (disabled when not set)
	option 'logFile' '$cache_path/polipo.log'
	option 'forbiddenFile' '$dropfile'
	option 'dnsQueryIPv6' 'false'
	option 'dnsUseGethostbyname' 'true'
	option 'dnsNameServer' '127.0.0.1'
	option 'dnsMaxTimeout' '1'
	option 'dnsNegativeTtl' '1'

config 'polipo' 'cache'
	# disk cache location, you should always use external storage device
	# (disabled when not set)
	option 'diskCacheRoot' '$cache_path'
	# disk cache cleanup settings
	#option 'diskCacheUnlinkTime' '20d'
	#option 'diskCacheTruncateTime' '5d'
	#option 'diskCacheTruncateSize' '3145728'
	# set to 1 if proxy is used by multiple users
	option 'cacheIsShared' '1'

config 'polipo' 'pmm'
	# poor man's multiplexing segment size to fetch
	option 'pmmSize' '8192'
EOF
}

_config_system ()
{
	local NODE="$1"

	echo "${OLD_HOSTNAME}" >/proc/sys/kernel/hostname
	
	cat >/etc/config/system <<EOF
config 'system'
	option 'hostname' '${OLD_HOSTNAME}'
	option 'timezone' 'UTC'
	option 'cronloglevel' '9'

config 'rdate'						# must be updated!
	list 'server' 'ac-ntp0.net.cmu.edu'
	list 'server' 'ptbtime1.ptb.de'
	list 'server' 'ac-ntp1.net.cmu.edu'
	list 'server' 'ntp.xs4all.nl'
	list 'server' 'ptbtime2.ptb.de'
	list 'server' 'cudns.cit.cornell.edu'
	list 'server' 'ptbtime3.ptb.de'
EOF

case "$HARDWARE" in
	"TP-LINK TL-WR1043ND")
		cat >>/etc/config/system <<EOF

config 'led' 'wlan_led'
	option name	'WLAN'
	option sysfs	'tl-wr1043nd:green:wlan'
	option trigger	'phy0rx'
EOF
	;;
	"BulletM")
		:
	;;
esac

	case "${INSTALLATION}" in
		*)
			weblogin_hide=
		;;
	esac

	cat >>/etc/config/system <<EOF

config 'weblogin'
${weblogin_hide}	option enabled	'1'
	option namespace 'capital_citys_de'
EOF

	case "${NODE}_${INSTALLATION}" in
		42_ejbw*)
			echo >>/etc/config/system "	option authserver '192.168.111.183'"
		;;
	esac


	cat >>/etc/config/system <<EOF

config 'profile'
	option name	'${INSTALLATION}_${PROFILE_MODE}'
	option nodenumber '$NODE'
	option ipsystem	'${IPSYSTEM}'

config 'vds'
	option server	'root@intercity-vpn.de:/var/www/networks/${INSTALLATION}/vds/'
	option enabled	'1'

config 'monitoring'
	option url	'http://intercity-vpn.de/networks/${INSTALLATION}'

config 'fwupdate'
	option url	'http://intercity-vpn.de/firmware'
	option mode	'testing'

config 'admin'
	option location	'$( contact location )'
	option latlon	'$( contact latlon )'
	option mail	'$( contact mail )'
	option name	'$( contact name )'
	option phone	'$( contact phone )'
	option neturl	'$( contact neturl )'

config 'vpn'
	option hostname 'weimarnetz.de'
	option ipaddr	'77.87.48.19'
EOF
}

_config_softwareinstall ()
{
	local service

	for service in olsrd netserver ; do {
		/etc/init.d/$service enable
	} done

	for service in samba siproxd ; do {
		/etc/init.d/$service disable
	} done
}

_config_wireless ()			# fixme! channels hardcoded
{
	local NODE="$1"
	local MAC="$( uci get wireless.radio0.macaddr )"
	local htmode country

	[ -z "$MAC" ] && {
		MAC="11:22:33:44:55:66"
		log "[ERR] empty mac, we set $MAC"
	}

	case "$CHANNEL" in
		1|2|3|4|5|6) htmode="HT40+" ;;
		   12|13|14) htmode="HT20" ;;		# fixme!
		          *) htmode="HT40-" ;;
	esac

	case "$PROFILE_MODE" in
		hybrid)
			htmode="20"
		;;
	esac

	if   [ -e /etc/init.d/apply_profile.regulatory.bin ]; then
		country="US		# see hacked /usr/lib/crda/regulatory.bin"
	elif [ $CHANNEL -gt 13 ]; then
		country="JP"
	elif [ $CHANNEL -gt 11 ]; then
		country="DE"
	else
		country="US"
	fi

	case "$PROFILE_MODE" in
		hybrid)
			local ssid_adhoc=' '			# fixme!
			local ssid_ap="$SSID_ENFORCED"

			cat >/etc/config/wireless <<EOF
config wifi-device radio0
	option type	mac80211
	option country	$country
	option txpower	$TXPOWER
	option channel	$CHANNEL
	option macaddr	$MAC
	option frag	off
EOF

			case "$HARDWARE" in
				"TP-LINK TL-WR1043ND")
					cat >>/etc/config/wireless <<EOF
	option hwmode   11ng
	option htmode   $htmode
	list ht_capab   SHORT-GI-40
	list ht_capab   DSSS_CCK-40
	option noscan	1
EOF
				;;
				"BulletM")
					cat >>/etc/config/wireless <<EOF
	option hwmode	11ng
	option htmode	$htmode
	list ht_capab	SHORT-GI-40
	list ht_capab	TX-STBC
	list ht_capab	RX-STBC1
	list ht_capab	DSSS_CCK-40
	option noscan	1
EOF
				;;
			esac

			cat >>/etc/config/wireless <<EOF

config wifi-iface
	option device	radio0
	option network	wlan
	option mode	adhoc
	option bssid	'$ssid_adhoc'
	option ssid	'${new_essid}'
	option mcast_rate ${MCAST_RATE}
#	option bintval	1000

config wifi-iface
	option device	radio0
	option network	wlan
	option mode	ap
	option ssid	'${new_essid}'
EOF
		;;
		ap)
			local old_essid="$( uci get wireless.@wifi-iface[0].ssid )"
			local new_essid="${INSTALLATION} $NODE"

			[ -n "$SSID_ENFORCED" ] && {
				new_essid="$SSID_ENFORCED"
			}

			case "$old_essid" in
				*[0-9])
					new_essid="$old_essid"
				;;
				*")")
					new_essid="$old_essid"
				;;
				*" "*)
					new_essid="$old_essid"
				;;
				LaLaBa*|*Dach)
					new_essid="$old_essid"
				;;
			esac

			cat >/etc/config/wireless <<EOF
config wifi-device radio0
	option type	mac80211
	option country	$country
	option txpower	$TXPOWER
	option channel	$CHANNEL
	option macaddr	$MAC
	option frag	off
	option noscan	1
EOF

			case "$HARDWARE" in
				"TP-LINK TL-WR1043ND")
					cat >>/etc/config/wireless <<EOF
	option hwmode   11ng
	option htmode   $htmode
	list ht_capab   SHORT-GI-40
	list ht_capab   DSSS_CCK-40
EOF
				;;
				"BulletM")
					cat >>/etc/config/wireless <<EOF
	option hwmode	11ng
	option htmode	$htmode
	list ht_capab	SHORT-GI-40
	list ht_capab	TX-STBC
	list ht_capab	RX-STBC1
	list ht_capab	DSSS_CCK-40
EOF
				;;
				"SPW500V"|"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"ASUS WL-HDD"|"ASUS WL-500g Premium V2")
					cat >>/etc/config/wireless <<EOF
	option hwmode   11g
EOF

				;;
			esac

			cat >>/etc/config/wireless <<EOF

config wifi-iface
	option device	radio0
	option network	wlan
	option mode	ap
	option ssid	'${new_essid}'
EOF
		;;
		*)
			local new_essid="bb"

			case "${INSTALLATION}" in
				aschbach*) new_essid="Berghotel" ;;
				ffweimar*) new_essid="weimarnetz" ;;
			esac

			cat >/etc/config/wireless <<EOF
config wifi-device radio0
	option type	mac80211
	option country	$country
	option channel	$CHANNEL
#	option ath9k_chanbw 20		# temporary, 5, 10 or 20 (default)
	option macaddr	$MAC
	option frag	off
	option txpower	$TXPOWER
	option beacon_int 1000
	option noscan	1
EOF

			case "$HARDWARE" in
				"TP-LINK TL-WR1043ND")
					cat >>/etc/config/wireless <<EOF
	option hwmode	11ng
	option htmode	$htmode
	list ht_capab   SHORT-GI-40
	list ht_capab   DSSS_CCK-40
EOF
				;;
				"BulletM")
					cat >>/etc/config/wireless <<EOF
	option hwmode	11ng
	option htmode	$htmode
	list ht_capab	SHORT-GI-40
	list ht_capab	TX-STBC
	list ht_capab	RX-STBC1
	list ht_capab	DSSS_CCK-40
EOF
				;;
				"SPW500V"|"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"ASUS WL-HDD"|"ASUS WL-500g Premium V2")
					cat >>/etc/config/wireless <<EOF
	option hwmode	11g
EOF
				;;
			esac

			cat >>/etc/config/wireless <<EOF

config wifi-iface
	option device	radio0
	option network	wlan
	option mode	adhoc
	option bssid	'$BSSID'
	option ssid	'${new_essid}'
	option mcast_rate ${MCAST_RATE}
#	option bintval	1000
EOF
		;;
	esac

	cat >>/etc/config/wireless <<EOF

config auto_optimize
	option neigh	'off'
EOF
}

_config_mail ()
{
	cat >/etc/config/mail <<EOF
config pop3
	option username	'$POP3_USERNAME'
	option password	'$POP3_PASSWORD'
	option server	'pop.gmx.net'
	option port	'110'

config smtp
	option server	'mail.gmx.net'
	option port 	'25'
	option auth	'pop-before-smtp'
	option mail	'wlan-assistance@gmx.de'
	option name	'Ticket-Assistent'
EOF
}

_config_sms ()
{
	cat >/etc/config/sms <<EOF
config sms
	option username	'$SMS77_USERNAME'
	option password	'$SMS77_PASSWORD'
	option post	''
	option phonebook	''
EOF
}

_config_network ()
{
	local NODE="$1"
	local PROTO
	local LANDEV
	local WANDEV

	if [ "$GATEWAY" = "dhcp" ]; then
		PROTO="dhcp"
	else
		PROTO="static"
	fi

	case "$HARDWARE" in
		"SPW500V")
			LANDEV="eth0"
		;;
		"ASUS WL-HDD")
			LANDEV="eth1"
		;;
		"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"ASUS WL-500g Premium V2")
			LANDEV="eth0.0"
			WANDEV="eth0.1"
		;;
		"BulletM")
			LANDEV="eth0"
		;;
		"Dell TrueMobile 2300")
			LANDEV="eth0"
			LANMAC="00:90:4b:39:7b:5e"	# fixme!
			WANDEV="eth1"
			WANMAC="00:90:4b:39:7b:5f"	# fixme!
		;;
		*)
			LANDEV="eth0.1"
			WANDEV="eth0.2"
		;;
	esac

	cat >/etc/config/network <<EOF
config 'interface' 'loopback'
	option 'ifname'   'lo'
	option 'proto'    'static'
	option 'ipaddr'   '127.0.0.1'
	option 'netmask'  '255.0.0.0'

config 'interface' 'lan'
	option 'ifname'   '$LANDEV'
$( test -n "$LANMAC" && echo "	option 'macaddr'	'$LANMAC'" )
	option 'proto'    'static'
	option 'ipaddr'   '$( _ipsystem do $NODE | grep LANADR= | cut -d'=' -f2 )'
	option 'netmask'  '$( _ipsystem do $NODE | grep LANMSK= | cut -d'=' -f2 )'

EOF
	case $HARDWARE in
		"SPW500V"|"ASUS WL-HDD"|"BulletM")
			:			# no wandev/singleport
		;;
		*)
			local hide_gateway="#"
			local wan_ipaddr="$(  _ipsystem do $NODE | grep WANADR= | cut -d'=' -f2 )"
			local wan_netmask="$( _ipsystem do $NODE | grep WANMSK= | cut -d'=' -f2 )"
			local wan_gateway=
			local username password hideip

			case "${NODE}_${INSTALLATION}" in
				119_satama)
					PROTO="static"
					GATEWAY=yes			# for HNA4/olsrd
					wan_ipaddr="192.168.145.23"
					wan_netmask="255.255.255.0"
					wan_gateway="192.168.145.2"
					hide_gateway=
				;;
				2_tkolleg)
					:
				;;
				3_itzehoe)
					PROTO="pppoe"
					GATEWAY="yes"			# for HNA4/olsrd
					username="$PPPOE_USERNAME"
					password="$PPPOE_PASSWORD"
					hide_gateway=
					hideip="true"
				;;
				2_hotello-B01)
					PROTO="static"
					GATEWAY=yes			# for HNA4/olsrd
					wan_ipaddr="10.31.24.1"
					wan_netmask="255.255.255.0"
					wan_gateway="10.31.24.254"
					hide_gateway=
				;;
				2_aschbach)
					PROTO="static"
					GATEWAY=yes			# for HNA4/olsrd
					wan_ipaddr="192.168.166.100"
					wan_netmask="255.255.255.0"
					wan_gateway="192.168.166.254"
					hide_gateway=
				;;
				7_liszt28)
					PROTO="static"
					GATEWAY=yes			# for HNA4/olsrd
					wan_ipaddr="192.168.1.2"
					wan_netmask="255.255.255.0"
					wan_gateway="192.168.1.1"
					hide_gateway=
				;;
				99_liszt28)
					PROTO="pppoe"
					GATEWAY="yes"			# for HNA4/olsrd
					username="$PPPOE_USERNAME"
					password="$PPPOE_PASSWORD"
					hide_gateway=
					hideip="true"
				;;
				3_paltstadt)
					PROTO="pppoe"
					GATEWAY="yes"			# for HNA4/olsrd
					username="$PPPOE_USERNAME"
					password="$PPPOE_PASSWORD"
					hide_gateway=
					hideip="true"
				;;
				50_ejbw)
					PROTO="dhcp"
					GATEWAY=yes			# for HNA4/olsrd
					hide_gateway=
					# will/must be 192.168.111.183/24
				;;
				8_rehungen)
					PROTO="static"
					GATEWAY=yes			# for HNA4/olsrd
					wan_ipaddr="10.1.0.8"
					wan_netmask="255.255.0.0"
					wan_gateway="10.1.0.1"
					hide_gateway=
				;;
			esac

	cat >>/etc/config/network <<EOF

config 'interface' 'wan'
	option 'ifname' '$WANDEV'
$( test -n "$WANMAC" && echo "	option 'macaddr'	'$WANMAC'" )
	option 'proto' '$PROTO'
${hideip:+#}	option 'ipaddr'	 '$wan_ipaddr'
${hideip:+#}	option 'netmask' '$wan_netmask'
$hide_gateway	option 'gateway' '$wan_gateway'
${username:+	option 'username' '$username'}
${password:+	option 'password' '$password'}
EOF
		;;
	esac

		local wlan_ipaddr wlan_netmsk
		local alias_ifname alias_proto alias_ipaddr alias_netmask
		local hide="#"

		wlan_ipaddr="$( _ipsystem do $NODE | grep WIFIADR= | cut -d'=' -f2 )"
		wlan_netmsk="$( _ipsystem do $NODE | grep WIFI_PRE= | cut -d'=' -f2 )"
		wlan_netmsk="$( _net cidr2mask $wlan_netmsk )"

	cat >>/etc/config/network <<EOF

config 'interface' 'wlan'
	option 'ifname'	'wlan0'
	option 'proto'	'static'
	option 'ipaddr'	 '$wlan_ipaddr'
	option 'netmask' '$wlan_netmsk'

EOF
	case "${NODE}_${INSTALLATION}" in
		119_satama)
			alias_ipaddr="10.63.10.1"
		;;
	esac

	[ -n "$alias_ipaddr" ] && hide=

	cat >>/etc/config/network <<EOF
${hide}config 'alias'
$hide	option 'interface' 'wlan'
$hide	option 'proto' 'static'
$hide	option 'ipaddr' '$alias_ipaddr'
$hide	option 'netmask' '${alias_netmask:-255.255.255.255}'
EOF


	case $HARDWARE in
		"TP-LINK TL-WR1043ND")
			cat >>/etc/config/network <<EOF		
config 'switch'
	option 'name' 'rtl8366rb'
        option 'reset' '1'
        option 'enable_vlan' '1'

config 'switch_vlan'
	option 'device' 'rtl8366rb'
	option 'vlan' '1'
	option 'ports' '1 2 3 4 5t'

config 'switch_vlan'
	option 'device' 'rtl8366rb'
	option 'vlan' '2'
	option 'ports' '0 5t'
EOF
		;;
		"BulletM")
			:	# no vlan config
		;;
		"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"ASUS WL-HDD"|"ASUS WL-500g Premium V2"|"Dell TrueMobile 2300")

			local PORT0 PORT1 HIDEVLAN2

			case "$HARDWARE" in
				"ASUS WL-HDD"|"Buffalo WHR-HP-G54")
					PORT0="1 2 3 4 5"
					PORT1="0 5"
				;;
				"Dell TrueMobile 2300")
					HIDEVLANS="#"
					PORT0="0 1 2 3 4 5u"
					PORT1=
				;;
				*)
					PORT0="0 1 2 3 5"
					PORT1="4 5"
				;;
			esac

			cat >>/etc/config/network <<EOF

${HIDEVLANS}config switch eth0
${HIDEVLANS}	option enable	1

${HIDEVLANS}config switch_vlan eth0_0
${HIDEVLANS}	option device	'eth0'
${HIDEVLANS}	option vlan	0
${HIDEVLANS}	option ports	'$PORT0'

${HIDEVLANS}config switch_vlan eth0_1
${HIDEVLANS}	option device	'eth0'
${HIDEVLANS}	option vlan	1
${HIDEVLANS}	option ports	'$PORT1'
EOF
		;;
	esac
}

_config_dhcp ()			# domain = .olsr
{
	local NODE="$1"
	local cache

	case $HARDWARE in
		"TP-LINK TL-WR1043ND"|"BulletM")
			cache="1000"
		;;
		*)
			cache="100"
		;;
	esac

	cat >/etc/config/dhcp <<EOF
config dnsmasq
	option cachesize	$cache	# query with 'kill -SIGUSR1 \$( pidof dnsmasq ); logread | tail -n5'
	option domainneeded	0	# forward querys without dots
	option boguspriv	1
	option filterwin2k	0	# enable for dial on demand
	option localise_queries	1
	option rebind_protection 0	# disable if upstream must serve RFC1918 addresses
	option rebind_localhost 0	# enable for RBL checking and similar services
	#list rebind_domain example.lan  # whitelist RFC1918 responses for domains
	option local	'/lan/'
	option domain	'lan'
	option expandhosts	1
	option nonegcache	0
	option authoritative	1
	option readethers	1
	option leasefile	'/tmp/dhcp.leases'
	option resolvfile	'/tmp/resolv.conf.auto'
	list addnhosts		'/var/run/hosts_olsr'
	list addnhosts		'/etc/local.hosts'
	list server 		'$DNSSERVER'
	#list server		'/mycompany.local/1.2.3.4'
	#option nonwildcard	1
	#list interface		br-lan
	#list notinterface	lo
	option dhcpscript	'/etc/dhcp-script.d/10dhcpscript'

config dhcp lan
	option interface	lan
	option start 		34
	option limit		8
	option leasetime	2h
	option force		1
	option ignore		${DHCP_IGNORE_LAN:-0}

config dhcp wlan
	option interface	wlan
	option start 		2
	option netmask		'255.255.255.240'
	option limit		8
	option leasetime	1h
	option force		1
	option ignore		${DHCP_IGNORE_WLAN:-0}

config dhcp wan
	option interface	wan
	option ignore		1
EOF
}

_config_aliases ()
{
	local FILE="/etc/profile"
	touch $FILE

	grep -q ^"alias ll=" $FILE || {
		log "writing ll"
		echo >>$FILE "alias ll='ls -la'"
	}

	grep -q ^"alias flush=" $FILE || {
		log "writing flush"
		echo >>$FILE "alias flush='echo flushing_caches; echo 3 > /proc/sys/vm/drop_caches'"
	}

	grep -q ^"alias lr=" $FILE || {
		log "writing logread-abbreviation: lf"
		echo >>$FILE "alias lr='logread'"	
	}

	grep -q ^"alias regen=" $FILE || {
		log "writing kalua-loader regen()"
		echo >>$FILE "alias regen='/etc/kalua_init ;. /tmp/loader'"
	}

	fgrep -q "[ -e /tmp/loader" $FILE || {
		log "writing kalua-loader -> autoloader"
		echo >>$FILE "[ -e /tmp/loader ] && . /tmp/loader"
	}

	grep -q ^"alias n=" $FILE || {
		log "writing alias 'neigh': use just keyword 'n' to see neighbours"
		echo >>$FILE "alias n='wget -qO - http://127.0.0.1:2006/neighbours'"
	}

	grep -q "033" $FILE || {
		log "writing better prompt"
		echo >>$FILE 'export PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\] "'
	}

	grep -q ^"alias myssh=" $FILE || {
		log "alias myssh"
		local KEY="/etc/dropbear/dropbear_dss_host_key"
		local COMMAND="ssh -i $KEY"
		echo >>$FILE "alias myssh='echo \"executing: $COMMAND\"; $COMMAND'"
	}
}

_config_olsrd ()
{
	local NODE="$1"
	local INTERFACES1		# Mode: ether
	local INTERFACES2		# Mode: adhoc
	local hna_net hna_mask

	hna_net="$(  _ipsystem do $NODE | grep OLSR_HNA= | cut -d'=' -f2 | cut -d'/' -f1 )"
	hna_mask="$( _ipsystem do $NODE | grep OLSR_HNA= | cut -d'/' -f2 )"
	hna_mask="$( _net cidr2mask $hna_mask )"

	local landev="lan"
	local wandev="wan"
	local wifidev="wlan"

	case "HARDWARE" in
		"SPW500V"|"ASUS WL-HDD"|"BulletM")
			wandev=
		;;
	esac

	[ "$( uci get network.wan.proto )" = "static" ] || {
		wandev=		# we must be sure, that network-section is already written
	}

	[ -n "$wandev" ] && {
		wandev=" $wandev"
	}

	case "$PROFILE_MODE" in 
		ap)
			INTERFACES1="${landev}${wandev}"
			INTERFACES2=
		;;
		adhoc|hybrid)
			INTERFACES1="${landev}${wandev}"
			INTERFACES2="$wifidev"
		;;
	esac

	cat >/etc/config/olsrd <<EOF
config olsrd
        option IpVersion		'4'
	option FIBMetric		'flat'		# approx, correct, flat
	option Willingness		'7'
	option TcRedundancy		'2'
	option LinkQualityAlgorithm	'$OLSR_METRIC'	# etx_ff, etx_ffeth, etx_float, etx_fpm
	option MprCoverage		'7'
#	option RtTable			'111'
#	option RtTableDefault		'254'		# cat /etc/iproute2/rt_tables

config Interface
	list interface			'$INTERFACES1'
	option Ip4Broadcast		'255.255.255.255'
	option HelloInterval		'3.0'
	option HelloValidityTime	'125.0'
	option TcValidityTime		'500.0'
	option TcInterval		'2.0'
	option MidInterval		'25.0'
	option MidValidityTime		'500.0'
	option HnaInterval		'10.0'
	option HnaValidityTime		'125.0'
EOF
[ "$OLSR_METRIC" = "etx_ffeth" ] && {
	cat >>/etc/config/olsrd <<EOF
	option Mode			'ether'		# enforces cost of 0.100
EOF
}
	[ -n "$INTERFACES2" ] && cat >>/etc/config/olsrd <<EOF

config Interface
	list interface			'$INTERFACES2'
	option Ip4Broadcast		'255.255.255.255'
	option HelloInterval		'3.0'
	option HelloValidityTime	'125.0'
	option TcValidityTime		'500.0'
	option TcInterval		'2.0'
	option MidInterval		'25.0'
	option MidValidityTime		'500.0'
	option HnaInterval		'10.0'
	option HnaValidityTime		'125.0'
EOF
[ "$OLSR_METRIC" = "etx_ffeth" -a -n "$INTERFACES2" ] && {
	cat >>/etc/config/olsrd <<EOF
	option Mode			'mesh'		# uses normal cost-calculation / default
EOF
}

	cat >>/etc/config/olsrd <<EOF

config LoadPlugin
	option library	'olsrd_arprefresh.so.0.1'

config LoadPlugin
	option library	'olsrd_nameservice.so.0.3'

config LoadPlugin
	option library	'olsrd_watchdog.so.0.1'

config LoadPlugin
	option library	'olsrd_txtinfo.so.0.1'
	option accept	'0.0.0.0'

config 'Hna4'
        option 'netaddr' '$hna_net'
        option 'netmask' '$hna_mask'
EOF

	[ -n "$GATEWAY" ] && {
		cat >>/etc/config/olsrd <<EOF

config 'Hna4'
        option 'netaddr' '0.0.0.0'
        option 'netmask' '0.0.0.0'

EOF
	}
}

_config_firewall ()
{
	local NN="$1"
	local MASQ MTU

	if [ -n "$GATEWAY" ]; then
		MASQ=1
		MTU=1
	else
		MASQ=0
		MTU=0
	fi

	cat >/etc/config/firewall <<EOF
config defaults
	option syn_flood	1
	option input		ACCEPT
	option output		ACCEPT 
	option forward		ACCEPT

config zone
	option name		lan
	option input		ACCEPT 
	option output		ACCEPT 
	option forward		ACCEPT

config zone
	option name		wan
	option input		ACCEPT
	option output		ACCEPT 
	option forward		ACCEPT
	option masq		$MASQ
	option mtu_fix		$MTU

config forwarding 
	option src      	lan
	option dest     	wan

config include
	option path		/etc/firewall.user
EOF

	cat >/etc/firewall.user <<EOF
#!/bin/sh

exit 0
EOF

}

[ -e /etc/init.d/apply_profile.regulatory.bin ] && {
	rm "/usr/lib/crda/regulatory.bin"
	if ln -s "/etc/init.d/apply_profile.regulatory.bin" "/usr/lib/crda/regulatory.bin"; then
		log "[OK] installed new/magic regulatory.bin in /usr/lib/crda"
	else
		log "[ERR] failed to install regulatory.bin in /usr/lib/crda"
	fi
}

if [ -e /etc/init.d/apply_profile.tarball.tgz ]; then
	mv /etc/init.d/apply_profile.tarball.tgz /tmp/tarball.tgz
else
	has_default_route && {
		TARBALL="http://intercity-vpn.de/firmware/ar71xx/images/testing/tarball.tgz"
		I=0

		get_tarball()
		{
			has_default_route || return 1

			wget -O /tmp/tarball.tgz "$TARBALL"
		}

		while ! get_tarball ; do {
			log "fetching $TARBALL failed, counter $I (max25), trying again in 30sec"
			sleep 30
			I=$(( $I + 1 ))
			[ $I -gt 25 ] && break
		} done
	}
fi

[ -e /tmp/tarball.tgz ] && {
	cd /
	tar xzf /tmp/tarball.tgz
}

[ -e /etc/kalua_init ] && {
	/etc/kalua_init
	. /tmp/loader
	/etc/init.d/S41build_static_netparam
}

for SECTION in softwareinstall system mail wireless network dhcp aliases olsrd firewall sms polipo; do {
	log "....working on section '$SECTION'"
	_config_$SECTION "$NODENUMBER"
	log "[ok] ready with section '$SECTION'"
} done

	F="/etc/init.d/generate_hardware_info"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=11
boot ()
{
	/etc/init.d/S02check_interface_correctness_fff+

	if [ -e /www/REBOOT_COUNTER ]; then
		read COUNT </www/REBOOT_COUNTER
		COUNT="\$(( \$COUNT + 1 ))"
		echo \$COUNT >/www/REBOOT_COUNTER
	else
		echo 1 >/www/REBOOT_COUNTER
	fi
}
EOF
chmod +x "$F"
"$F" enable

	F="/etc/init.d/generate_kalua_loader"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=00
boot ()
{
	touch /tmp/BOOT
	touch /tmp/DEBUG
	/etc/kalua_init
}
EOF
chmod +x "$F"
"$F" enable

	F="/etc/init.d/generate_netparams"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=41
boot ()
{
	/etc/init.d/S41build_static_netparam start
	/etc/init.d/S43ethers_fff+ start
#	touch /tmp/FREE
}
EOF
chmod +x "$F"
"$F" enable

	F="/etc/init.d/end_boot"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=99
boot ()
{
	rm /tmp/BOOT

	[ -d "/sys/class/leds/tl-wr1043nd:green:qss/" ] && {
		logger -t boot_end -p daemon.info "\$0: switching leds off"
		for TYPE in qss system usb wlan; do {
			echo 0 >/sys/class/leds/tl-wr1043nd:green:\$TYPE/brightness
		} done
	}

	scheduler -a "cron.upgrade_packages; rm /tmp/DEBUG"

	read t1 dummy </proc/uptime
	logger -t boot_end -p daemon.info "\$0: uptime: \${t1}sec"
}
EOF
chmod +x "$F"
"$F" enable

	F="/etc/init.d/firewall-user"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=46
boot ()
{
	# logger "firewall-user disabled..."
	/etc/local.fw-fff+ start
}
EOF
chmod +x "$F"
"$F" enable

/etc/init.d/firewall disable



	F="/etc/init.d/cron.user"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=51
boot ()
{
	/etc/init.d/S51crond_fff+ start
}
EOF
chmod +x "$F"
"$F" enable
rm /etc/init.d/cron

	F="/etc/init.d/prepare_stuff"
	cat >"$F" <<EOF
#!/bin/sh /etc/rc.common
START=70
boot ()
{
	/etc/init.d/S70prepare_fff+ start
	/etc/init.d/S72filter_fff+ start
}
EOF
chmod +x "$F"
"$F" enable

# webserver-related stuff
uci set uhttpd.main.index_page="cgi-bin-welcome.sh"
uci set uhttpd.main.error_page="/cgi-bin-welcome.sh"
uci set uhttpd.main.config="/etc/httpd.conf"
uci set uhttpd.main.interpreter=".sh=/bin/ash"

[ -e /usr/lib/uhttpd_tls.so ] || {
	uci delete uhttpd.main.listen_https
}

uci commit
echo "/cgi-bin/:root:\$p\$root" >/etc/httpd.conf
[ -s /www/cgi-bin-welcome.sh	] || ln -s /www/cgi-bin-welcome 	/www/cgi-bin-welcome.sh
[ -s /www/cgi-bin-sql.sh	] || ln -s /www/cgi-bin-sql     	/www/cgi-bin-sql.sh
[ -s /www/cgi-bin-tool.sh	] || ln -s /www/cgi-bin-tool_fff+	/www/cgi-bin-tool.sh

touch /www/SOFTWARE_FULLY_INSTALLED

. /tmp/loader

[ -e /tmp/JFFS2_OK ] && {
	cron.upgrade_packages

	_ssh sanitize_and_cleanup_keys
	[ -e /tmp/REGISTRATED ] && rm /tmp/REGISTRATED
	_watch random_node_id
}

echo
echo "[ok] R E A D Y"
echo
echo "removing /etc/init.d/apply_profile with:"
echo "rm /etc/init.d/apply_profile"
echo
echo "maybe kill S98apply_profile!"
echo "now type: reboot && exit"

# END
