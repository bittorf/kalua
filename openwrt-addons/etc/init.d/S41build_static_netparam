#!/bin/sh
. /tmp/loader

# todo:
# with/without OLSR on all interfaces? or specific interfaces?

ifname2mtu()
{
	ip link show dev "${1:-nonexistent_$2}" |
	 sed -n 's/^.* mtu \([0-9]*\).*/\1/p;q'
}

netparam_for_uci_devices()
{
	local NAME IFNAME ADDRESS NETMASK MTU BROADCAST NETWORK PREFIX HOSTNAME CONFIG_PROFILE

	for DEVICE in loopback wlan lan wan ; do {

		case "$DEVICE" in
			loopback) NAME="LO" ;;
			wlan)	  NAME="WIFI" ;;
			lan)	  NAME="LAN" ;;
			wan)	  NAME="WAN" ;;
		esac

		IFNAME="$(  uci -q get network.$DEVICE.ifname  )"

		# make sure, that hybrid interfaces use the adhoc-interface
		# for 'testing' in scheduler: incoming_wifi_activity()
		# otherwise use the first interface
		[ "$DEVICE" = "wlan" -a -e '/etc/config/wireless' ] && {
			[ -e "/sbin/ifstatus" ] && {
				if   fgrep -q "wlanadhoc" "/etc/config/wireless"; then
					# typical: wlan0-1
					IFNAME="$( ifstatus "wlanadhoc" | fgrep '"device":' | cut -d'"' -f4 )"
					DEVICE="wlanadhoc"
				elif fgrep -q "wlan" "/etc/config/wireless"; then
					# typical: wlan0
					IFNAME="$( ifstatus "wlan" | fgrep '"device":' | cut -d'"' -f4 )"
				fi
			}

			[ -z "$IFNAME" ] && {
				[ "$( uci -q get wireless.radio0.disabled )" = "1" ] || {
					# if we have only disabled all VIF's, there is also not wifi:
					grep -q 'wlan0:' '/proc/net/dev' && IFNAME="wlan0"
				}
			}
		}

		ADDRESS="$( uci -q get network.$DEVICE.ipaddr  )"
		NETMASK="$( uci -q get network.$DEVICE.netmask )"
		MTU="$( ifname2mtu "$IFNAME" "$DEVICE" )"

		case "$( uci -q get network.$DEVICE.proto )" in
			dhcp)
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
			;;
			pppoe)							# fixme! should also work for pppoe-lan etc.
				IFNAME="pppoe-wan"
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
				MTU="$( ifname2mtu "$IFNAME" "$DEVICE" )"
			;;
		esac

		case "$DEVICE" in
			wlan)
				[ "$( uci -q get wireless.radio0.disabled )" = 1 ] && {
					IFNAME=; ADDRESS=; NETMASK=
				}
			;;
		esac

		echo "${NAME}DEV=$( _sanitizer do "$IFNAME" firstword )"
		echo "${NAME}MTU=$MTU"
		echo "${NAME}ADR=$ADDRESS"
		echo "${NAME}MSK=$NETMASK"

		BROADCAST=;NETWORK=;PREFIX=
		[ -n "$MTU" ] && eval $( ipcalc.sh $ADDRESS $NETMASK )

		echo "${NAME}BRC=$BROADCAST"
		echo "${NAME}NET=$NETWORK"
		echo "${NAME}PRE=$PREFIX"
		echo "${NAME}OLSR="
	} done

	list_wifi_devs()
	{
		local network_name list_wifi_names i

		for i in 0 1 2 3 4 5 6 7; do {
			list_wifi_names="$list_wifi_names $( uci -q get wireless.@wifi-iface[$i].network )"
		} done

		# for old firmwares
		[ -e "/sbin/ifstatus" ] || {
			[ -n "$list_wifi_names" ] && {
				[ -e '/etc/config/wireless' ] && {
					[ "$( uci -q get wireless.radio0.disabled )" = "1" ] || echo "wlan0"
				}
			}

			return 0
		}

		# uci -q get wireless.@wifi-iface[0].device -> radio0
		# uci -q get wireless.radio0.disabled -> 1?

		for network_name in $list_wifi_names; do {
			# can be:
			# JSON: "device": "wlan0",
			# or:
			# Interface wlan0 not found
			ifstatus "$network_name" | fgrep '"device":' | cut -d':' -f2 | cut -d'"' -f2
		} done
	}

	# force to 1 line
	echo "WIFI_DEVS='$( for IFNAME in $( list_wifi_devs ); do echo -n "$IFNAME "; done )'"

	[ -e "/tmp/dmesg.boot" ] || . /usr/sbin/cron.check_klog
	fgrep -sq "phy0: failed to initialize PHY" "/tmp/dmesg.boot" && {
		echo "WIFIDEV=	# failed to initialize PHY"
	}
}

_build()
{
	local FUNC="build"
	local FILE="/tmp/NETPARAM"

	_log do $FUNC daemon debug "building '$FILE' for an uci-device"
	netparam_for_uci_devices >$FILE
}


if [ $( _system uptime sec ) -lt 60 ]; then
	if [ -e "/www/NETPARAM" ]; then
		cp "/www/NETPARAM" "/tmp/NETPARAM"
	else
		sleep 30		# fixme! ifstatus wlanadhoc empty, needs about 18 sec till OK on 1043ND
	fi
else
	HASH_OLD="$( _file hash '/tmp/NETPARAM' )"
	_build

	if [ -e "/www/NETPARAM" ]; then
		. '/tmp/NETPARAM'
		grep -q ^"WIFIDEV=$WIFIDEV"$ '/www/NETPARAM' || {
			_log do earlyboot_netparam daemon alert "stored new version, now with WIFIDEV='$WIFIDEV'"
			cp '/tmp/NETPARAM' '/www/NETPARAM'
		}
	else
		_log do earlyboot_netparam daemon alert "stored initial version, WIFIDEV='$WIFIDEV'"
		cp '/tmp/NETPARAM' '/www/NETPARAM'
	fi
fi

HASH_NEW="$( _file hash /tmp/NETPARAM )"
[ "$HASH_OLD" = "$HASH_NEW" ] || {
	/etc/kalua_init			# this includes a static version of NETPARAM
}
