_log_shell_is_interactive()
{
	case "$-" in
		*i*)
			return 0
		;;
		*)
			case "$SHELL" in
				"/bin/ash"|"-ash")
					return 0
				;;
				*)
					return 1
				;;
			esac
		;;
	esac
}

_log_sleep()		# _log sleep firmware_burn 180 step 10
{
	local subroutine_name="$1"
	local duration="$2"
	local dummy="$3"	# "step"
	local step="${4:-1}"
	local i="$duration"
	local uptime_start="$( _system uptime sec )"
	local n do_sleep
	local prio="info"	# only show first and last message with info, other with debug

	while [ $i -ge 0 ]; do {
		n=$i
		i=$(( $i - $step ))

		if [ $i -ge 0 ]; then
			do_sleep="true"
		else
			do_sleep=
			prio="info"
		fi

		# during high load/lowmem this can help:
		[ $(( $( _system uptime sec ) - $uptime_start )) -gt $duration ] && return

		_log do "$subroutine_name" daemon $prio "[OK] sleeping $n/$duration sec"
		prio="debug"

		[ -n "$do_sleep" ] && /bin/sleep $step
	} done
}

_log_debug()
{
	local message="$1"
	local dev="${2:-${LANDEV:-${WANDEV:-eth0}}}"
	local ip_bin="/usr/sbin/ip"
	local netmsg_bin="/bin/netmsg"

	message="$( _system load 1min ):$( _system ram_free ):${message}"
	[ -e "/dev/console" ] && echo "$message" >/dev/console

	[ -e "$ip_bin" ] || return 0
	[ -e "$netmsg_bin" ] || return 0

	set -- $( $ip_bin address show dev "$dev" )
	broadcast_ip="$*"
	broadcast_ip=${broadcast_ip#*inet }
	broadcast_ip=${broadcast_ip#*brd }
	broadcast_ip=${broadcast_ip%% *}

	# readable from a neighbour with:
	# 	tcpdump -s 1500 -n -l -w - -i $YOURDEV port 0x1337 | strings | while read L; do test ${#L} -gt 5 && echo $L; done
	# or with an UDP-capable netcat via:
	# 	nc -lup 4919	//fixme!
	# or with iptables:
	#	iptables -I INPUT -p udp --dport 4919 -j LOG --log-prefix "0x1337: "
	#	logread -f
	# or with iptables:
	#	iptables -I INPUT -j LOG
	#	iptables -I INPUT -p udp --dport 698 -j ACCEPT
	#	iptables -I INPUT -p tcp --dport 22 -j ACCEPT
	#	logread -f

	if [ -z "$broadcast_ip" ]; then
		if grep -sq "$dev:" /proc/net/wireless ; then
			broadcast_ip="192.168.1.255"
			local ip="192.168.1.1/24"
		else
			broadcast_ip="10.255.255.255"
			local ip="10.0.0.1/8"
		fi

		$ip_bin link set dev "$dev" up
		$ip_bin address add "$ip" dev "$dev"
		$netmsg_bin "$broadcast_ip" "NO-IP: $message"
		$ip_bin address del "$ip" dev "$dev"
	else
		$netmsg_bin "$broadcast_ip" "$message"
	fi
}

_log_do ()				# CALL: _log do my_function_name daemon info "mytext"
{
	local FATHER_PROCESS="$0"
	local FUNCTION="$1"		# ARG1, string (name of function, from where call was invoked)
	local FACILITY="$2"		# ARG2, string (source = kern,user,mail,daemon,syslog,lpr,news,uucp,cron,authpriv,local0-7)
	local PRIO="$3"			# ARG3, string (emerg,alert,crit,err,warning,notice,info,debug,sms)	// nonstandard: sms
	local MESSAGE="$4"		# ARG4, string (humanreadable verbose message, all is syslog-alike)
	local message_sms="$5"
	local phonenumber="$6"
	local force="$7"
	local EVERLOG="/www/everlasting_syslog.txt"
	local MEM UPTIME DATE i

	[ -z "$MESSAGE" ] && {		# from stdin (pipe into function)
		while read -t 3 MESSAGE; do {
			_log do "$FUNCTION" "$FACILITY" "$PRIO" "STDIN${i}: ${MESSAGE:-stdin_was_empty}"
			i=$(( ${i:-1} + 1 ))
		} done

		return 0
	}

	case "$FUNCTION" in
		firmware*)
			_log debug "${HOSTNAME:-box} $FATHER_PROCESS: $FUNCTION: $MESSAGE"
		;;
	esac

	[ -e /tmp/LOWMEM ] && return	# fixme! maybe everlasting and log to console should work?

	mem_uptime_and_date ()
	{
		[ -z "$MEM" -o -z "$UPTIME" -o -z "$DATE" ] && {
			_system ram_free	MEM=
			_system uptime sec	UPTIME=
			_system date evalable	DATE=
		}
	}

	case "$PRIO" in
		debug|emerg|alert|crit|sms)			# idea: [ $MEM -lt 999999 ] && PRIO="alert"
			eval $( mem_uptime_and_date )

			[ "$PRIO" != "debug" ] && {		# write to logfile in flash, which is not lost after reboot
			
				[ "$( _system flash_free )" -gt 150 ] && {
					echo >>$EVERLOG "$DATE ' [up ${UPTIME}s $MEM bytes free] $FATHER_PROCESS [${FACILITY}.${PRIO}] ${FUNCTION}() $MESSAGE"
					case "$CONFIG_PROFILE" in
						ffweimar*)
							_watch archivsize "$EVERLOG" 250
						;;
						*)
							_watch archivsize "$EVERLOG" 1000
						;;
					esac
				}

				MESSAGE="$( _sanitizer do "$MESSAGE" strip_newlines )"
				local UNIXTIME="$( _system date unixtime )"
				local ARCHIV_NODE_MESSAGE="$DATE ' [up ${UPTIME}s $MEM bytes free] $FATHER_PROCESS [${FACILITY}.${PRIO}] ${FUNCTION}() $MESSAGE"
				echo >>/tmp/ARCHIV_MONITORING "log=$( _sanitizer do "$ARCHIV_NODE_MESSAGE" alphanumspacedot urlvalue )&time=${UNIXTIME}"
				touch /tmp/SEND_ALIVE_FAILED
			}
		;;
	esac

	_log shell_is_interactive && {			# fixme! it does'nt work in nested functions, e.g. _net mac2vendor $MAC
		eval $( mem_uptime_and_date )
		FATHER_PROCESS="TERM:${TERM} $0"
		echo "$DATE ' [up ${UPTIME}s $MEM bytes free] $FATHER_PROCESS [${FACILITY}.${PRIO}] ${FUNCTION}() $MESSAGE" 1>&2   # to stderr
	}

	boot_and_debug_message ()
	{
		if [ -e "/tmp/service_ssh_nowatching" ]; then
			[ -e "/tmp/messages" ] && rm "/tmp/messages"
		else
			pidof syslogd >/dev/null || {		# write to special logfile
				eval $( mem_uptime_and_date )
				echo >>/tmp/messages "$DATE ' [up ${UPTIME}s $MEM bytes free] ${FACILITY}.${PRIO} fff+ $FATHER_PROCESS ${FUNCTION}() $MESSAGE"
				# _log netmessage "$MESSAGE"	# fixme!
			}
		fi
	}

	if [ "$PRIO" = "debug" ]; then

		[ ! -e /tmp/DEBUG ] && {
			_log shell_is_interactive || return 0
		}
		boot_and_debug_message
	else
		boot_and_debug_message
	fi

	# fixme! howto print out logging when webserver executes a script?

	logger -t "fff+ $FATHER_PROCESS ${FUNCTION}()" -p "${FACILITY}.${PRIO}" -- "$MESSAGE"
}

_log_append_info()
{
	local location="$( _weblogin metadata_locationname )"
	local host="$( uci -q get system.@system[0].hostname )"
	local date="$( _system date humanreadable nice )"

	echo "${location}->${host} @ ${date}"
}
