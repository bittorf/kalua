_ntp_pool()
{
	_list shuffle "$( uci -q get system.@timeserver[0].server ) $( uci -q get system.@rdate[0].server )"
}

_ntp_set()			# SENS: setting time, so each node is nearly in sync with hole network (builtin clock's have strong scatter)
{				# ARG1: force
	local FUNC="ntp_set"	# OUT1: -	// ntp_unset: date -s 010101011970	
	local OPTION="$1"
	local  TRY="0"
	local  UP1="$( _system uptime sec )"
	local  UP2="0"
	local HOST IP
	local FILE_SUCCESS="/tmp/ntp_was_successful"	# can be 0 size or has unixtimestamp from last ntp_set
	local program_call

	case "$OPTION" in
		is_unset)
			[ -e $FILE_SUCCESS ] && return 1	# fixme!
			return 0
		;;
		force)
			[ -e "$FILE_SUCCESS" ] && rm "$FILE_SUCCESS"
		;;
	esac

	[ -e $FILE_SUCCESS ] && {
		read UP2 <"$FILE_SUCCESS"
		UP2="$(( $UP1 - ${UP2:-0} ))"		# fixme! use _stopwatch()-abstraction?
		[ $UP2 -lt 3600 ] && {
			_log do $FUNC daemon debug "last successful ntp-fetch was only $UP2 seconds before, aborting"
			return 0
		}
	}
	touch $FILE_SUCCESS			# prevents double-execution

	if which rdate >/dev/null; then
		program_call="rdate -s"
	elif which ntpd >/dev/null; then
		program_call="ntpd -q -p"
		pidof ntpd >/dev/null && killall ntpd
	else
		_log do $FUNC daemon debug "no suitable timesetter found"
		return 0
	fi

	_log do $FUNC daemon debug "start"

	while [ $TRY -lt 5 ]; do {
		TRY=$(( $TRY + 1 ))
	
		local ID="0"
		for IP in $( _ntp pool ); do {		# IP or HOSTNAME
		
			ID=$(( $ID + 1 ))		

			_log do $FUNC daemon debug "ID: '$ID' IP: '$IP'"

			$program_call $IP >/dev/null 2>&1 && {
				
				UP2="$( _system uptime sec )"			
				HOST="$( _net ip2dns $IP )"

				_log do $FUNC daemon info "success after $(( $UP2 - $UP1 )) seconds and ${TRY}. round on ${ID}. IP in pool (${IP} = $HOST)"

				TRY=9

				[ "$( _file size "$FILE_SUCCESS" )" -eq 0 ] && {

					if [ ! -e "${FILE_SUCCESS}_firsttime" ]; then			# fixme! take real timediff into account

						touch "${FILE_SUCCESS}_firsttime"
#						_log do $FUNC daemon sms \
#							"first successful set after reboot" \
#							"[OK] Neustart eines Geraetes durchgefuehrt: $( _log append_info )"
					else
						_log do $FUNC daemon info "successful set"
					fi
				}

				echo "$UP2" >$FILE_SUCCESS
				break				# fixme! calc + log diff before/after timesetting in sec?
			}
			
			sleep 5
		} done
	} done

	[ "$TRY" != "9" ] && {
		_log do $FUNC daemon info "end without success (try: $TRY)"
		rm $FILE_SUCCESS						# fixme! 
	}
}
