#!/bin/sh

# marks:
# 0x11 = port80, redirect to local port 80
# 0x12 = port443, redirect to local port 443
# 0x13 = port53udp, redirect to local port 53
# 0x14 = port53tcp, redirect to local port 53
# 0x15 = port53udp, redirect to local port 5353
# 0x16 = port53tcp, redirect to local port 5353
# 0x33 = connection_start
# 0x44 = connection_close
# 0x88 = unauthenticated, gets rejected

_netfilter_start()
{
	mkdir -p "/tmp/NETFILTER"

	_netfilter ipforwarding_needed && {
		_netfilter ipforwarding_start
	}

	_netfilter masquerade_start
	_netfilter conntrack_adjust_max
	_netfilter mssfix

	[ -e "/etc/init.d/apply_profile" ] && return 0
	[ -e "/www/GOOD_MODULE_UNLOAD" ] || {
		[ -n "$LOWMEM" ] && return 0
	}

    _vpn needed && _vpn block start


	bool_true 'system.@weblogin[0].enabled' && {
		[ -e "/www/SIMPLE_MESHNODE" ] || {
			_netfilter splash_start
			echo >>$SCHEDULER '_netfilter splash_autoadd'
		}
	}

	_netfilter traffic_control_needed && {
		grep -q ^"sch_htb " /proc/modules || insmod sch_htb
		grep -q ^"cls_u32 " /proc/modules || insmod cls_u32
	}
}

_netfilter_traffic_control_show()
{
	local mac="$1"
	local interface ip file dummy speed down up method
	local tab="	"

	[ -n "$mac" ] && {
		file="/tmp/NETFILTER/USER/$mac/traffic_control_params"
		if [ -e "$file" ]; then
			read dummy dummy dummy dummy dummy down up dummy <"$file"
			speed="$(( $down / 1024 )):$(( $up / 1024 ))"

			file="/tmp/NETFILTER/USER/$mac/traffic_control_speed"
			[ -e "$file" ] && {
				read down up method <"$file"
				[ "$method" = "initial" ] || {
					speed="$speed -> $method -> $(( $down / 1024 )):$(( $up / 1024 ))"
				}
			}
		else
			speed="unshaped"
		fi

		echo "${speed} [kbit]"
		return 0
	}

	for interface in $LANDEV $WANDEV $WIFI_DEVS; do {
		[ -e "/tmp/TRAFFIC_CONTROL_UP_$interface" ] || continue

		echo "interface: $interface {"

		echo "${tab}qdisc {"
		tc -s qdisc ls dev "$interface" | sed "s/.*/${tab}${tab}&/"
		echo "${tab}}"

		echo "${tab}class {"
		tc class show dev "$interface" | sed "s/.*/${tab}${tab}&/"
		echo "${tab}}"

		echo "${tab}filter {"
		tc filter show dev "$interface" | while read line; do {
			case "$line" in
				*"match "*)
					ip="$( echo "$line" | sed -n 's|^\(.*match \)\(..\)\(..\)\(..\)\(..\)/ffffffff\(.*\)|echo $((0x\2)).$((0x\3)).$((0x\4)).$((0x\5))|p' )"
					ip="$( eval $ip )"
					echo "${tab}${tab}$line"

					case "$line" in
						*16)
							echo "${tab}${tab}${tab}# IP: $ip (destination = incoming)"
						;;
						*12)
							echo "${tab}${tab}${tab}# IP: $ip (source = outgoing)"
						;;
					esac

					read mac <"/tmp/NETFILTER/IP2MAC/$ip"
					echo -n "${tab}${tab}${tab}# remove via: _"
					echo    "netfilter traffic_control_user_del $mac"
				;;
				*)
					echo "${tab}${tab}$line"
				;;
			esac
		} done
		echo "${tab}}"

		echo "}"
	} done
}

_netfilter_traffic_control_needed()
{
	# TODO: fix shaping
	return 1

	local kernel="$( uname -r )"

	[ -e "/usr/sbin/tc" ] || return 1
	[ -e "/lib/modules/${kernel}/sch_htb.ko" ] || return 1
	[ -e "/lib/modules/${kernel}/cls_u32.ko" ] || return 1

	[ $( _system version short ) -lt 33160 ] && return 1

	return 0
}

_netfilter_convert_speed_to_bit()
{
	local speed="$1"	# 32kbit | 1mbit | 128000

	case "$speed" in
		*kbit)
			echo $(( ${speed//kbit/} * 1024 ))
		;;
		*mbit)
			echo $(( ${speed//mbit/} * 1024 * 1024 ))
		;;
		*)
			echo "$speed"
		;;
	esac
}

_netfilter_traffic_control_user_add()
{
	local funcname="netfilter_traffic_control_user_add"
	local ip="$1"
	local speed_up="$2"		# e.g. 1mbit, 32kbit or 128000
	local speed_down="$3"		# TODO: use profile instead of fix values, e.g. youtube
	local mac i j						# e.g. 32/1024 = wigo/tv works
	local users file comment interface

	interface="$( ip -oneline route get "$ip" )"
	set -- $interface
	interface="$3"
	file="/tmp/TRAFFIC_CONTROL_UP_$interface"

	# hierarchical token bucket: http://luxik.cdi.cz/~devik/qos/htb/
	[ -e "$file" ] || {
		# fixme! we should only add if really needed (e.g. unshaped mac?)
		tc qdisc add dev "$interface" root handle 1: htb default 1 && {
			touch "$file"
		}
	}

	read mac <"/tmp/NETFILTER/IP2MAC/$ip"
	read users <"$file"
	case "$users" in
		*"$mac"*)
			_log do $funcname daemon info "$ip/$mac already shaped on this interface"
			return 0
		;;
		*)
			echo "$users $mac" >"$file"
		;;
	esac

	[ -z "$speed_up" ] && {
		# TODO: fetch from DB
		speed_up="$(   uci -q get system.@weblogin[0].default_speed_up   )" || return 0
		speed_down="$( uci -q get system.@weblogin[0].default_speed_down )" || return 0

		case " $( uci -q get system.@weblogin[0].mac_unshaped ) " in
			*" $mac "*)
				return 0
			;;
		esac
	}

	_log do $funcname daemon info "shaping ip $ip to up/down: $speed_up/$speed_down on dev $interface"

	case "$speed_up" in
		*kbit|*mbit)
			speed_up="$( _netfilter convert_speed_to_bit "$speed_up" )"
		;;
	esac

	case "$speed_down" in
		*kbit|*mbit)
			speed_down="$( _netfilter convert_speed_to_bit "$speed_down" )"
		;;
	esac

	# fixme! use a sieve, always fillup from bottom?
	_watch counter "/tmp/TRAFFIC_CONTROL_users_$interface" increment 2
	read i <"/tmp/TRAFFIC_CONTROL_users_$interface"
	j=$(( $i - 1 ))

	# this is a helper for next function
	echo "$mac $ip $interface $j $i $speed_down $speed_up" >/tmp/NETFILTER/USER/$mac/traffic_control_params
	echo "$speed_down $speed_up initial" >/tmp/NETFILTER/USER/$mac/traffic_control_speed

	file="/tmp/NETFILTER/USER/$mac/traffic_control_del"
	[ -e "${file}.forced_stop" ] && rm "${file}.forced_stop"
	cat >"$file" <<EOF
# for later cleanup
tc filter "del" dev "$interface" protocol ip parent 1:0 prio $i
tc filter "del" dev "$interface" protocol ip parent 1:0 prio $j
tc class  "del" dev "$interface" parent 1: classid 1:$i
tc class  "del" dev "$interface" parent 1: classid 1:$j
rm "/tmp/NETFILTER/USER/$mac/traffic_control_params"
EOF

	tc class  "add" dev "$interface" parent 1: classid 1:$j "htb" rate "$speed_down"
	tc class  "add" dev "$interface" parent 1: classid 1:$i "htb" rate "$speed_up"
	tc filter "add" dev "$interface" protocol ip parent 1:0 prio $j u32 match ip dst "$ip/32" flowid 1:$j
	tc filter "add" dev "$interface" protocol ip parent 1:0 prio $i u32 match ip src "$ip/32" flowid 1:$i
}

_netfilter_traffic_control_suggest_timepercent()	# deflate typical daily traffic peaks
{
	local peak percent
	local minute="${MINUTE:-$( date +%H )}"		# built during taskplanner: 00...23
	local hour="${HOUR:-$( date +%M )}"		# built during taskplanner: 00...59

	# better ask gateway?
	# respect day of month! (workday vs. weekend/public holiday)

	case "$hour:$minute" in		# 10 chars = throttle to 40%
		16:*) peak="+++" ;;
		17:*) peak="+++++" ;;
		18:*) peak="+++++++" ;;
		19:*) peak="++++++++" ;;
		20:*) peak="++++++++" ;;
		21:*) peak="++++++" ;;
		22:*) peak="+++" ;;
		   *) peak= ;;
	esac

	case "$CONFIG_PROFILE" in
		rehungen*)
			peak=
		;;
		*)
			peak=
		;;
	esac

	echo $(( 100 - (6*${#peak}) ))
}

_netfilter_noshaping_time()
{
	local mac="$1"
	local minute="${MINUTE:-$( date +%H )}"		# built during taskplanner: 00...23
	local hour="${HOUR:-$( date +%M )}"		# built during taskplanner: 00...59
	local date="$HOUR:$MINUTE"

	case "$CONFIG_PROFILE" in
		liszt28*)
			case "$NODENUMBER" in
				20|48)		# wigo|danny
					case "$date" in
						0*|17:*|18:*|19:*|20:*|21:*|22:*|23:*)
							return 0
						;;
					esac
				;;
				*)
					case "$date" in
						0*|22:*|23:*)
							return 0
						;;
					esac
				;;
			esac
		;;
	esac

	return 1
}

_netfilter_happy_hour()		# no additional shaping during this time, so initial values are respected (100%)
{
	local mac="$1"
	local mac_source
	local minute="${MINUTE:-$( date +%H )}"		# built during taskplanner: 00...23
	local hour="${HOUR:-$( date +%M )}"		# built during taskplanner: 00...59
	local date="$HOUR:$MINUTE"

	case "$CONFIG_PROFILE" in
		rehungen*)
			return 0
		;;
		*)
			case "$date" in
				0*|22:*|23:*)
					return 0
				;;
			esac
		;;
	esac

	return 1
}

_netfilter_traffic_control_suggest_speedpercent()	# the more traffic, the lower the speed
{
	local traffic="$1"		# [megabyte]
	local option="$2"

	_netfilter happy_hour && {
		echo "100"
		return 0
	}

	local traffic_border=2000	# [megabyte] fixme! should depend from initial_speed
	local percent2=100
	local percent=$(( 100 - ( ($traffic * 100) / $traffic_border ) ))	# e.g. 50%

	[ "$option" = "respect_time" ] && {
		percent2="$( _netfilter traffic_control_suggest_timepercent )"
	}

	percent=$(( ($percent2 * $percent) / 100 ))	# 40% x 75% -> 30%

	[ $percent -lt 1 ] && percent=1
	echo "$percent"
}

_netfilter_traffic_control_autoapply_speedsuggest()
{
	local list_macs="${1:-$( _netfilter user_list )}"
	local traffic_border_for_inactivity='2500'		# megabytes
	local traffic_border_for_reaction='1000'		# megabytes
	local speed_min=128000					# bit/s
	local mac traffic file ip interface j i speed_down speed_up percent params

	_netfilter traffic_control_needed || return 0

	for mac in $list_macs; do {
		traffic="$( _netfilter stats "$mac" megabytes )"
		[ $traffic -lt $traffic_border_for_inactivity ] && continue

		file="/tmp/NETFILTER/USER/$mac/traffic_control_params"
		if [ -e "$file" ]; then
			[ $traffic -lt $traffic_border_for_reaction ] && continue
			read mac ip interface j i speed_down speed_up <"$file"

			percent="$( _netfilter traffic_control_suggest_speedpercent "$traffic" respect_time )"
			params="$mac $ip $interface $j $i $speed_down $speed_up ${percent}% $speed_min"

			[ "$percent" = '100' ] || _netfilter traffic_control_user_change_speed $params
		else
			[ -e "/tmp/NETFILTER/USER/$mac/traffic_control_del.forced_stop" ] || {
				_netfilter noshaping_time "$mac" || {
					ip="$( _net mac2ip "$mac" )"
					_netfilter traffic_control_user_add "$ip"
				}
			}
		fi
	} done
}

_netfilter_traffic_control_user_change_speed()		# <mac> <ip>
{
	local funcname="netfilter_traffic_control_user_change_speed"
	local mac="$1"			# only for logging
	local ip="$2"			# only for logging
	local file="/tmp/NETFILTER/USER/$mac/traffic_control_params"

	[ -z "$ip" ] && {
		echo "Usage:"
		echo "_$funcname $( cat "$file" )"
		echo "_$funcname $( cat "$file" ) +8%"
		echo "_$funcname $( cat "$file" ) 50%"
		echo "_$funcname $( cat "$file" ) initial"
		echo "hint: last 2 values are up/down and can be set to 'now'"
		return 1
	}

	local interface="$3"
	local classid_download="$4"
	local classid_upload="$5"
	local speed_down="$6"
	local speed_up="$7"
	local speed_change="$8"		# empty = set absolut values OR percentual of given values
	local speed_min="$9"
	local dummy params

	file="/tmp/NETFILTER/USER/$mac/traffic_control_speed"

	[ -e "$file" ] || {
		echo '_netfilter traffic_control_user_add <ip> <up> <down>'
		return 1
	}

	case "$speed_down" in
		"now"*)
			read speed_down dummy dummy <"$file"
		;;
	esac

	case "$speed_up" in
		"now"*)
			read dummy speed_up dummy <"$file"
		;;
	esac

	local new_speed_up new_speed_down method

	[ -e "/tmp/NETFILTER/USER/$mac/traffic_control_del" ] || return 1

	if [ -n "$speed_change" ]; then		# e.g. -21% or +4% or 50%
		method="$speed_change"
		speed_change="$( _sanitizer do "$method" numeric )"

		case "$method" in
			"+"*)
				new_speed_down=$(( $speed_down * ( 100 + ${speed_change} ) / 100 ))
				new_speed_up=$((   $speed_up   * ( 100 + ${speed_change} ) / 100 ))
			;;
			"-"*)
				new_speed_down=$(( $speed_down * ( 100 - ${speed_change} ) / 100 ))
				new_speed_up=$((   $speed_up   * ( 100 - ${speed_change} ) / 100 ))
			;;
			*"%")
				new_speed_down=$(( ( $speed_down * ${speed_change} ) / 100 ))
				new_speed_up=$((   ( $speed_up   * ${speed_change} ) / 100 ))
			;;
			initial)
				params="$mac $ip $interface $classid_download $classid_upload $speed_down $speed_up"
				echo "$params" >/tmp/NETFILTER/USER/$mac/traffic_control_params
				new_speed_down="$speed_down"
				new_speed_up="$speed_up"
			;;
		esac
	else
		method="fix"
		new_speed_down="$speed_down"
		new_speed_up="$speed_up"
	fi

	[ -n "$speed_min" ] && {
		[ $new_speed_down -lt $speed_min ] && new_speed_down="$speed_min"
		[ $new_speed_up   -lt $speed_min ] && new_speed_up="$speed_min"
	}

	file="/tmp/NETFILTER/USER/$mac/traffic_control_speed"
	echo "$new_speed_down $new_speed_up $method" >"$file"

	_log do $funcname daemon debug "shaping ip $ip to up/down: $new_speed_up/$new_speed_down on dev $interface (method: $method)"
	tc class change dev "$interface" parent 1: classid 1:$classid_download "htb" rate "$new_speed_down"
	tc class change dev "$interface" parent 1: classid 1:$classid_upload   "htb" rate "$new_speed_up"
}

_netfilter_traffic_control_user_del()
{
	local mac="$1"
	local file="/tmp/NETFILTER/USER/$mac/traffic_control_del"
	local device="$( _net mac2dev "$mac" exact )"
	local users_old users_new some_mac

	if [ -e "$file" ]; then
		. "$file"
		rm "$file"
		touch "${file}.forced_stop"
	else
		touch "${file}.forced_stop"
		return 1
	fi

	file="/tmp/TRAFFIC_CONTROL_UP_${device}"	# fixme! make a list abstraction
	users_new=

	[ -e "$file" ] && {
		read users_old <"$file"
		for some_mac in $users_old; do {
			case "$some_mac" in
				$mac)
				;;
				*)
					users_new="$users_new $some_mac"
				;;
			esac
		} done
	}

	if [ -z "$users_new" ]; then
		_netfilter traffic_control_stop "$device"
	else
		echo "$users_new" >"$file"
	fi
}

_netfilter_traffic_control_stop()
{
	local list="${1:-$LANDEV $WANDEV $WIFI_DEVS}"
	local interface mac

	# TODO:
	# maybe we can omit this, just deleting root-qdisc's
	# this will also remove applied 'tc filter' for that interface
	for mac in $( _netfilter user_list ); do {
		_netfilter traffic_control_user_del "$mac"
	} done

	for interface in $list; do {
		[ -e "/tmp/TRAFFIC_CONTROL_UP_$interface" ] && {
			tc qdisc del dev "$interface" root
			rm "/tmp/TRAFFIC_CONTROL_UP_$interface"		# sign for root-qdisc
			rm "/tmp/TRAFFIC_CONTROL_users_$interface"	# id_counter
		}
	} done
}

_netfilter_stats()
{
	local context="$1"
	local unit="$2"
	local line bytes packets

	case "$context" in
		forward_lan2lan)
			line="$( $IPT -nxvL FORWARD | fgrep "!$WIFIDEV !$WIFIDEV" )"
		;;
		forward_lan2wifi)
			line="$( $IPT -nxvL FORWARD | fgrep "!$WIFIDEV $WIFIDEV" )"
		;;
		forward_wifi2wifi)
			line="$( $IPT -nxvL FORWARD | fgrep "$WIFIDEV  $WIFIDEV" )"
		;;
		*)
			if _sanitizer do "$context" mac check; then
				line="$( $IPT -t mangle -nxvL FORWARD | fgrep "incoming_$context" )"

				set -- $line
				packets="${1:-0}"
				bytes="${2:-0}"

				line="$( $IPT -t mangle -nxvL FORWARD | fgrep "outgoing_$context" )"
			else
				return 1
			fi
		;;
	esac

	set -- $line
	packets=$(( ${packets:-0} + ${1:-0} ))
	bytes=$(( ${bytes:-0} + ${2:-0} ))

	case "$unit" in
		packets)
			echo "$packets"
		;;
		bytes)
			echo "$bytes"
		;;
		kilobytes)
			echo $(( $bytes / 1000 ))
		;;
		megabytes)
			echo $(( $bytes / 1000000 ))
		;;
	esac
}

_netfilter_conntrack_adjust_max()	# see: http://wiki.khnet.info/index.php/Conntrack_tuning
{
	local funcname="netfilter_conntrack_adjust_max"
	local max="$1"
	local file="/proc/sys/net/nf_conntrack_max"
	local file_buckets="/sys/module/nf_conntrack/parameters/hashsize"
	local buckets old_buckets old_max

	# dont conntrack DNS/olsrd
#	$IPT -t raw -I PREROUTING -p udp --dport 53 -j NOTRACK	# with this rule contacting external DNS over >1 hop does not work
	$IPT -t raw -I OUTPUT     -p udp --dport 53 -j NOTRACK
	$IPT -t raw -I PREROUTING -p udp --dport 698 -d 255.255.255.255 -j NOTRACK
	$IPT -t raw -I OUTPUT     -p udp --dport 698 -d 255.255.255.255 -j NOTRACK

	# below still needs fixing
	return 0

	[ -e "$file" ] || return 0
	read old_max <"$file"

	[ -z "$max" ] && {
		max="$( _system ram_size )"		# kilobytes
		if [ $max -lt 16384 ]; then
			max=1024
		else
			max=$(( ($max * 3) / 2 ))	# x1.5
		fi
	}

	grep -q ^"net.netfilter.nf_conntrack_max=${max}"$ "/etc/sysctl.conf" || {
		echo "net.netfilter.nf_conntrack_max=${max}" >>"/etc/sysctl.conf"
	}

	read old_buckets <"/proc/sys/net/netfilter/nf_conntrack_buckets"
	buckets=$(( $max / 8 ))
	[ $buckets -gt 1816 ] && buckets=1816		# klog/moduleinfo says this is max

	_log do $funcname daemon info "set $old_max -> $max conntrack-entries / $old_buckets -> $buckets buckets, needs $(( ($max * 350) / 1024 )) kilobytes (each 350 bytes)"
#	echo "$max" >"$file"		# check usage via: wc -l /proc/net/nf_conntrack
#	echo "$buckets" >"$file_buckets"
}

_netfilter_ipforwarding_needed()
{
	[ -x "/usr/sbin/olsrd" ] || return 1
	[ "$( uci -q get olsrd.@olsrd[0].disabled )" = "1" ] && return 1

	return 0
}

_netfilter_ipforwarding_start()
{
	local funcname="netfilter_ipforwarding_start"
	local kernel="/proc/sys/net/ipv4/ip_forward"
	local state

	read state <"$kernel"
	echo "$state" >"/tmp/NETFILTER/FORWARDING_STATE_OLD"

	_log do $funcname daemon info "writing 1 to $kernel"
	echo 1 >"/proc/sys/net/ipv4/ip_forward"
}

_netfilter_ipforwarding_revert()
{
	local funcname="netfilter_ipforwarding_revert"
	local file="/tmp/NETFILTER/FORWARDING_STATE_OLD"
	local kernel="/proc/sys/net/ipv4/ip_forward"
	local state

	[ -e "$file" ] && {
		read state <"$file"

		pidof olsrd >/dev/null && {
			[ "$state" = "1" ] || {
				_log do $funcname daemon alert "olsrd running, forcing ON"
				state=1
			}
		}

		_log do $funcname daemon info "writing $state to $kernel"
		echo "$state" >"$kernel"
		rm "$file"
	}
}

_netfilter_stop()
{
	local option="$1"	# string: remember_over_reboot = ror
	local funcname='netfilter_stop'
	local mac state table
	local list_user="$( _netfilter user_list )"
	local interface ip mediatype dev hash

	[ -d '/tmp/NETFILTER' ] || return 0
	mkdir "/tmp/NETFILTER/isrunning_$funcname" || return 0

	[ -n "$list_user" ] && {
		for mac in $list_user; do {
			ip="$( _net mac2ip "$mac" )"
			dev="$( _net mac2dev "$mac" )"

			if _net dev_is_wifi "$dev"; then
				if   grep -sq "$hash" '/tmp/USERDB_COPY'; then
					mediatype="DB: mac allowed # non_wifi"
				elif grep -sq "$hash" "$DIR_DATABASE/USER/login/meta_index"; then
					mediatype="DB: mac allowed # non_wifi"
				else
					mediatype='wifi'
				fi
			else
				mediatype='non_wifi'	# keyword for keeping over reboot
			fi

			echo "_log do $funcname daemon info 'trying to check previously stopped user $mac'	# $mediatype option: $option"
			echo "/etc/dhcp-script.d/10dhcpscript add '$mac' '$ip' check_if_reachable		# $mediatype option: $option"

			_netfilter user_del "$mac" "$funcname"
		} done >"/tmp/NETFILTER_AUTOADD"
	}

	_netfilter traffic_control_needed && {
		_netfilter traffic_control_stop
	}

	_db backup "$funcname"

	case "$option" in
		'remember_over_reboot'|'ror')
			case "$CONFIG_PROFILE" in
				liszt28*)
					# TODO: removeme/debug - maybe we call this function twice?
					cp "/tmp/NETFILTER_AUTOADD" "/www/NETFILTER_AUTOADD.$( date ).$( cat /proc/uptime )"
				;;
			esac

			# avoid writing an empty file
			if grep -sq '# non_wifi' '/tmp/NETFILTER_AUTOADD' ; then
				grep '# non_wifi' '/tmp/NETFILTER_AUTOADD' >'/www/NETFILTER_AUTOADD'
			else

				rm '/www/NETFILTER_AUTOADD'
			fi
		;;
	esac

	_netfilter stop_all_tables
	rm -fR "/tmp/NETFILTER" "/tmp/NETFILTER/isrunning_$funcname"
	_netfilter ipforwarding_revert
}

_netfilter_stop_all_tables()
{
	local funcname='netfilter_stop_all_tables'

	for table in mangle filter nat raw; do {
		_log do $funcname daemon info "unloading table $table"
		$IPT -t $table -F
		$IPT -t $table -X
	} done

	# batman-stuff
	[ -e '/usr/sbin/ebtables' ] && {
		ebtables -t nat    -F
		ebtables -t filter -F
	}
}

_netfilter_mssfix()
{
	local file='/tmp/MSSFIX'

	# dont double apply, remove old entry
	[ -e "$file" ] && {
		$IPT -D FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
	}

	$IPT -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
	touch "$file"
}

_netfilter_masquerade_start()
{
	local funcname="netfilter_masquerade_start"
	local exception="$1"		# fixme! needs source/destination arg
	local device devname
	local statfile="/tmp/NETFILTER/MASQUERADING"

	[ -e "$statfile" ] && return 0

	mkdir -p "/tmp/NETFILTER"

	devname="$( _net local_inet_offer )"
	case "$devname" in
		wifi)
			device="$WIFIDEV"
		;;
		wan)
			device="$WANDEV"
		;;
		lan)
			# don't masquerade if configured in /etc/config/system (duplicate masquerading)
			[ "$( uci -q get system.@netfilter[0].lan_masquerading )" = "0" ] && return 0
			device="$LANDEV"
		;;
		pppoe)
			device="ppp+"
		;;
		*)
			_netfilter masquerade_stop
			return 0
		;;
	esac

	_log do $funcname daemon info "active for device $device ($devname)"

	if bool_true 'system.@system[0].restrict_local'; then
		echo "$IPT -t nat -A POSTROUTING -o $device ! -d $WANNET/$WANPRE -j MASQUERADE" >"$statfile"
		$IPT -t nat -A POSTROUTING -o $device ! -d $WANNET/$WANPRE -j MASQUERADE
	else
		echo "$IPT -t nat -A POSTROUTING -o $device -j MASQUERADE" >"$statfile"
		$IPT -t nat -A POSTROUTING -o $device -j MASQUERADE
	fi

	$IPT -A FORWARD -i $device
	$IPT -A FORWARD -o $device

}

_netfilter_masquerade_stop()
{
	[ -e "/tmp/NETFILTER/MASQUERADING" ] && {
		. "/tmp/NETFILTER/MASQUERADING"
		rm "/tmp/NETFILTER/MASQUERADING"
	}
}

_netfilter_myhna()
{
	local mask="$( uci -q get olsrd.@Hna4[0].netmask )"

	[ -n "$mask" ] && {
		echo "$( uci -q get olsrd.@Hna4[0].netaddr )/$( _net mask2cidr $mask )"
	}
}

_netfilter_is_meshnode()	# fixme! better iterate over olsrd-interface, if one is in wifi-adhoc-mode
{
	[ -e "/www/SIMPLE_MESHNODE" ] && return 1	# no iptables possible

	case "$CONFIG_PROFILE" in
		*_adhoc)
			return 0
		;;
		*)
			return 1
		;;
	esac
}

_netfilter_splash_start()
{
	local funcname='netfilter_splash_start'
	local myhna="$( _netfilter myhna )"
#	local debug="echo"			# must be empty for debug-mode
	local ip source destination dev temp_dev dnsport
	local dnsport dnsfake_ip
	local private_networks="172.16.0.0/12 192.168.0.0/16 10.0.0.0/8 169.254.0.0/16 127.0.0.0/8"

	dnsport=53

	mkdir -p "/tmp/NETFILTER/USER" \
		 "/tmp/NETFILTER/MAC2IP" \
		 "/tmp/NETFILTER/IP2MAC"

	# todo: how to deny spoofing source-address?

### everything what is 'ACCEPT'ed here, is not splashed

	# from alien router/client to me/further (also dhcp_in)
#	$IPT -t mangle -A PREROUTING ! -s $myhna -j ACCEPT
	$IPT -t mangle -N alien

	# fixme! $ROAMING_IP
	[ $NODENUMBER -lt 256 ] && $IPT -t mangle -A alien -s 192.168.$NODENUMBER.0/24 -j RETURN

	$IPT -t mangle -A alien -s $myhna -j RETURN
	$IPT -t mangle -A alien -j ACCEPT
	$IPT -t mangle -A PREROUTING -j alien

	# picopeer: source = this node, destination: all destination in this network
	$IPT -t mangle -N picopeer
	for source in $private_networks; do {
		for destination in $private_networks; do {
			$IPT -t mangle -A picopeer -s $source -d $destination -j ACCEPT
		} done
	} done
	$IPT -t mangle -A PREROUTING -j picopeer

	# olsr
	$IPT -t mangle -A PREROUTING -p udp --dport 698 -s $WIFINET/$WIFIPRE -d 255.255.255.255 -j ACCEPT

	_netfilter walledgarden_start

### end of ACCEPT

#$debug	$IPT -t mangle -A PREROUTING -p udp --dport 53 ! -d $myhna -j LOG --log-prefix "MANGLE.DNSq-UDP: "
	$IPT -t mangle -A PREROUTING -p udp --dport 53 ! -d $myhna -j MARK --set-mark 0x15	# redirect DNS - todo: limit rate via 'recent'
#$debug	$IPT -t mangle -A PREROUTING -p tcp --dport 53 ! -d $myhna -j LOG --log-prefix "MANGLE.DNSq-TCP: "
	$IPT -t mangle -A PREROUTING -p tcp --dport 53 ! -d $myhna -j MARK --set-mark 0x16	# redirect DNS - dig @8.8.8.8 +tcp google.com
#$debug	$IPT -t mangle -A PREROUTING -p tcp --dport 80	       -j LOG --log-prefix "MANGLE.splash.HTTP: "
	$IPT -t mangle -A PREROUTING -p tcp --dport 80 	       -j MARK --set-mark 0x11	# redirect HTTP

	_netfilter is_meshnode && {
		$IPT -A FORWARD ! -i $WIFIDEV ! -o $WIFIDEV		# wire -> wire
		$IPT -A FORWARD ! -i $WIFIDEV   -o $WIFIDEV		# wire -> wifi
		$IPT -A FORWARD   -i $WIFIDEV   -o $WIFIDEV		# wifi -> wifi
	}

	grep -q ^'ipt_REJECT ' /proc/modules || insmod ipt_REJECT	# fixme! remove later when new cron.patch_patch_kmodules.sh is active
	$IPT -A FORWARD -m mark --mark 0x88/0xff -j REJECT
	$IPT -A FORWARD -s $WIFINET/$WIFIPRE -d $WIFINET/$WIFIPRE -j ACCEPT		# picopeer 2nd time
	_netfilter mssfix

	if pidof bat_events >/dev/null; then
		local dev_list="br-mybridge gateway0 $WIFI_DEVS $LANDEV"
	else
		local dev_list="$WIFI_DEVS $LANDEV"
	fi

	add_dev()
	{
		temp_dev="$dev"
		[ "$dev" = 'gateway0' ] && dev='br-mybridge'

		ip="$( _net dev2ip "$dev" )" || return 1
		[ "$temp_dev" = 'gateway0' ] && dev='gateway0'

		$IPT -t nat -A PREROUTING -p udp -i $dev -m mark --mark 0x13/0xff -j DNAT --to-destination $ip:53
		$IPT -t nat -A PREROUTING -p tcp -i $dev -m mark --mark 0x14/0xff -j DNAT --to-destination $ip:53
		$IPT -t nat -A PREROUTING -p tcp -i $dev -m mark --mark 0x11/0xff -j DNAT --to-destination $ip:80
	}

	# TODO: hotplug
	for dev in $dev_list; do {
		add_dev "$dev" && dev_list="$( _list remove_element "$dev_list" "$dev" )"
	} done

	for dev in $dev_list; do {
		_log do $funcname daemon alert "2nd try needed for dev '$dev'"
		add_dev "$dev" && dev_list="$( _list remove_element "$dev_list" "$dev" )"
	} done

	[ -n "$dev_list" ] && _log do $funcname daemon alert "unable to add dev '$dev'"

	# control-group: any packets left?
	for dev in '-i eth+' '-i wlan+' ''; do {
		$IPT -t nat -A PREROUTING -p udp $dev -m mark --mark 0x13/0xff -j REDIRECT --to-port 53
		$IPT -t nat -A PREROUTING -p tcp $dev -m mark --mark 0x14/0xff -j REDIRECT --to-port 53
		$IPT -t nat -A PREROUTING -p tcp $dev -m mark --mark 0x11/0xff -j REDIRECT --to-port 80
	} done
}

_netfilter_splash_autoadd()
{
	local line ip mac file

	if [ -e '/www/NETFILTER_AUTOADD' ]; then
		/usr/sbin/cron.check_inet_gw_fff+
		. '/www/NETFILTER_AUTOADD'		# dont delete - in case we have an unscheduled reboot
	else
		file='/tmp/NETFILTER_AUTOADD'
		[ -e "$file" ] && {
			. "$file"
			rm "$file"
		}
	fi

	while read line; do {
		set -- ${line:-empty}
		ip="$1"
		mac="$4"

		if _netfilter user_probe "$mac"; then
			:	# already known
		else
			fgrep -sq "$ip;" '/tmp/CLIENTS_ALL' && {
				/etc/dhcp-script.d/10dhcpscript add "$mac" "$ip"
			}
		fi
	} done <'/proc/net/arp'
}

_netfilter_splash_batman_alien_unauth()
{
	local funcname='netfilter_splash_batman_alien_unauth'
	local dev line mac ip
	# bridge name bridge id STP enabled interfaces br-mybridge 7fff.4ed11242eff1 no bat0 wlan0-1 wlan1-1
	# or:
	# bridge name bridge id STP enabled interfaces
	local list_devs="$( brctl show )"
	set -- $list_devs

	case "$@" in
		*' bat0 '*)
			while shift; do {
				[ "$1" = 'bat0' ] && {
					shift
					list_devs="$@"
					break
				}
			} done

			for dev in $list_devs; do {
				iw dev "$dev" station dump | while read line; do {
					# Station ca:00:11:00:00:15 (on wlan0)
					case "$line" in
						'Station '*)
							set -- $line
							mac="$2"
							[ -e "/tmp/vds_user_$mac" ] || {
								ip="$( _net mac2ip "$mac" )"
								_log do $funcname daemon info "mac/ip $mac/$ip needs splash on node $NODENUMBER"
							}
						;;
					esac
				} done
			} done
		;;
	esac
}

_netfilter_splash_stop()
{
    true
}

_netfilter_walledgarden_start()
{
	local ip
	local list="$( _netfilter walledgarden_list )"

	if [ -z "$list" ]; then
		return 0
	else
		touch "/tmp/NETFILTER/WALLEDGARDEN"
	fi

	$IPT -t mangle -N walledgarden

	for ip in $list; do {
		case "$ip" in
			[0-9]*)
				$IPT -t mangle -A walledgarden -s $ip -j ACCEPT
				$IPT -t mangle -A walledgarden -d $ip -j ACCEPT
			;;
		esac
	} done

	$IPT -t mangle -A PREROUTING -j walledgarden
}

_netfilter_walledgarden_list()
{
	local list="
		141.54.160.24/32	ping01/mediathek
		141.54.1.1/32		BUW-DNS
		141.1.1.1/32		DFN
		85.25.251.231/32	vorratsdatenspeicherung.de
		82.149.225.169/32	wiki.vorratsdatenspeicherung.de
		141.54.160.48/32	m18.uni-weimar.de
		87.118.106.19/32	www.weimarnetz.de
		77.87.48.19/32		www.weimarnetz.de_newserver
        176.28.11.93        freifunk.net
        217.197.80.242      wiki.freifunk.net
		188.40.166.25		wireless.subsignal.org
		"

	# include installation-specific entries:
	_weblogin metadata_locationname default walled_garden

	echo "$list"
}

_netfilter_walledgarden_stop()
{
	[ -e "/tmp/NETFILTER/WALLEDGARDEN" ] && {
		$IPT -t mangle -F walledgarden
		$IPT -t mangle -D PREROUTING -j walledgarden
		$IPT -t mangle -X walledgarden
		rm "/tmp/NETFILTER/WALLEDGARDEN"
	}
}

_netfilter_user_list()
{
	local option="$1"
	local list="$2"
	local dir="/tmp/NETFILTER/USER"
	local mac dev speed traffic ip oct123 oct4 list last_action comment vendor hideandseek

	case "$option" in
		v|verbose)
			[ -z "$list" ] && list="$( ls -1 "$dir" )"
			[ -z "$list" ] && return 0
			_wifi include

			for mac in $list; do {
				_net mac2vendor "$mac" short >/dev/null 2>&1	# fetch vendors from internet into cache
			} done

			echo "# show life traffic:"
			echo '# while :; do eval $( _wifi show_station_traffic "$mac" $WIFIDEV $rx $tx $up ); sleep 1; done'
			echo '# while :; do _netfilter stats 00:01:e3:06:88:05 kilobytes; sleep 1; done'
			echo "# change shaping:"
			echo '# _netfilter traffic_control_user_change_speed "$mac"'
			echo '# _netfilter traffic_control_user_del "$mac"'
			echo

			for mac in $list; do {
				comment="$( _db user_macenabled_comment_get "$mac" )"
				vendor="$( _net mac2vendor "$mac" short )"

				read ip <"/tmp/NETFILTER/MAC2IP/$mac"

				# same length/space for all IP's
				oct4="${ip##*.}"
				oct123="${ip%.*}"
				ip="${oct123}.$( printf "%-3d" $oct4 )"

				dev="$( _net mac2dev "$mac" )"
				dev="$( _net dev_type "$dev" )"
				speed="$( _netfilter traffic_control_show "$mac" )"
				traffic="$( _netfilter stats "$mac" megabytes )"
				traffic="$( printf "%4s" $traffic )mb"
				if _vpn hideandseek_user_probe "$ip"; then
					hideandseek='true'
				else
					hideandseek=
				fi

				if [ "$dev" = "wifi" ]; then
					last_action="$( _wifi get_station_param "$mac" "inactive time" )"
					if [ -n "$last_action" ]; then
						last_action="(last action: $last_action ms)"
					else
						last_action="(not connected)"
					fi
				else
					last_action=
				fi

				echo "$mac : $ip : $dev - $traffic - $speed - ${hideandseek:+HIDE+SEEK} $vendor $last_action [$comment]"
			} done
		;;
		*)
			ls -1 "$dir" 2>/dev/null
		;;
	esac
}

_netfilter_user_stats_collect()		# this runs every minute, so speedcode!
{
	local bytes_incoming=0
	local mac line bytes_outgoing uptime rest
	read uptime rest <"/proc/uptime"; uptime="${uptime%.*}"

	$IPT -t mangle -nxvL FORWARD |
	 while read line; do {
		case "$line" in
			*'incoming_'*)
				set -- $line
				bytes_incoming=$(( $bytes_incoming + $2 ))
				mac="${3#*_}"
			;;
			*"outgoing_"*)
				set -- $line
				bytes_outgoing="$2"

				echo "$uptime $bytes_incoming $bytes_outgoing" >>"/tmp/NETFILTER/USER/${mac:-empty_mac}/stats"
				bytes_incoming=0
			;;
		esac
	} done
}

_netfilter_user_reachable()	# output: string/devname e.g. 'wlan0-1'
{
	local funcname="netfilter_user_reachable"
	local mac="$1"
	local ip="$2"
	local maxtry="${3:-5}"
	local dev line dev_guess devlist try

	# 00:00:00 = vendor 'xerox', but ofcourse this is invalid and comes from loopback/dhcp
	[ "$mac" = '00:00:00:00:00:00' ] && return 1

	_sanitizer do "$mac" mac check || return 1
	_sanitizer do "$ip"  ip4 check || return 1

	fgrep -sq "$ip " /www/cgi-bin/check_hosts.txt && return 1	# special list of other alien-nodes
	ip neigh show to "$ip" | fgrep -q " dev $WANDEV " && return 1	# no direct logins from WAN

	# TODO: ip can change when called via dnsmasq: e.g. 02:50:43:34:25:bc - if arping fails? refetch ip via 'ip neigh'

	if [ -n "$DNSMASQ_INTERFACE" ]; then
		dev_guess="$DNSMASQ_INTERFACE"
	else
		dev_guess="$( _net ip2dev "$ip" )"
	fi

	if   [ "$dev_guess" = "$LANDEV" ]; then
		[ "$( uci -q get system.@weblogin[0].force_lan_reachable )" = '1' ] && {
			echo "$LANDEV"
			return 0
		}

	elif _net dev_is_wifi "$dev_guess"; then
		iw dev "$dev_guess" station get "$mac" >/dev/null 2>/dev/null && {
			echo "$dev_guess"
			return 0
		}
	fi

	devlist="$( _list uniq "${LANDEV:-$( uci -q get network.lan.ifname )} $WIFI_DEVS" )"
	devlist="$( for dev in $devlist; do test "$dev" = "$dev_guess" || echo -n " $dev "; done )"
	devlist="$dev_guess $devlist"

	repair_mac()
	{
		local oldIFS="$IFS"; IFS=":"; set -- $1; IFS="$oldIFS"
		local tupel insert=

		# e.g. '0:80:77:0:22:4c' (missing first 0)
		for tupel in $1 $2 $3 $4 $5 $6; do {
			[ ${#tupel} -eq 1 ] && tupel="0${tupel}"
			echo -n "${insert}${tupel}"
			insert=':'
		} done
	}

	for dev in $devlist; do {
		_log do $funcname daemon debug "probing: mac: $mac ip: $ip dev: '$dev'"
		try="$maxtry"
		while [ $try -gt 0 ]; do {
			# root@box:~ arping -c1 -f -I $LANDEV 10.63.2.40
			# ARPING to 10.63.2.40 from 10.63.2.33 via eth0.1
			# Unicast reply from 10.63.2.40 [0:80:77:0:22:4c] 1.152ms
			# Sent 1 probe(s) (1 broadcast(s))
			# Received 1 replies (0 request(s), 0 broadcast(s))
			#
			# or e.g.:
			# Unicast reply from 192.168.0.1 [0:e:56:0:f:c5] 0.232ms
			#
			# or e.g.: works only with '-D' = 'Duplicated address detection mode'
			# but not all systems do this e.g. LANCOM
			# root@box:~ arping -I wlan0 10.10.183.74 -b
			# ARPING to 10.10.183.74 from 10.10.183.1 via wlan0
			# Sent 7 probe(s) (7 broadcast(s))
			# Received 0 reply (0 request(s), 0 broadcast(s))
			#
			# root@box:~ arping -I wlan0 10.10.183.74 -D
			# ARPING to 10.10.183.74 from 0.0.0.0 via wlan0
			# Unicast reply from 10.10.183.74 [a4:d1:d2:3a:e9:62] 172.323ms
			# Sent 1 probe(s) (1 broadcast(s))
			# Received 1 replies (0 request(s), 0 broadcast(s))
			#
			# !!! the 1st mac is the searched one, the 2nd is ???
			# root@box:~ arping -D -c1 -f -I $LANDEV 10.63.22.101
			# ARPING to 10.63.22.101 from 0.0.0.0 via eth0.1
			# Unicast reply from 10.63.22.101 [0:4:13:2f:65:cb]for 10.63.22.101 [0:0:1f:79:69:6e] 0.584ms
			# Sent 1 probe(s) (1 broadcast(s))
			# Received 1 replies (0 request(s), 0 broadcast(s))

			# with '-D' = 'Duplicated address detection mode'
			line="$( arping -D -c1 -f -I "$dev" "$ip" | fgrep ':' )" || {
				# not all systems do this e.g. LANCOM
				line="$( arping -c1 -f -I "$dev" "$ip" | fgrep ':' )"
			}

			[ -n "$line" ] && {
				line="$( echo "$line" | cut -d'[' -f2 | cut -d']' -f1 )"
				line="$( repair_mac "$line" )"

				[ "$mac" = "$line" ] && {
					echo "$dev"
					return 0
				}
			}

			try=$(( $try - 1 ))
		} done
	} done

	local prio='info'
	[ -z "$devlist" -o "$dev_guess" = "$LANDEV" ] && prio='alert'

	_log do $funcname daemon $prio "no_success: mac: $mac ip: $ip devlist: '$devlist' dev_guess: '$dev_guess'"
	return 1
}

_netfilter_user_add()
{
	local funcname="netfilter_user_add"
	local mac="$1"
	local ip="$2"		# can be empty
	local speed_up="$3"	# e.g. 1mbit, 32kbit
	local speed_down="$4"
	local dev myhna unexpected_ip

	[ -d "/tmp/NETFILTER/USER" ] || return 1
	[ -e "/tmp/OLSR/fixed_arp_$ip" ] && return 1

	if dev="$( _netfilter user_reachable "$mac" "$ip" )"; then
		mkdir "/tmp/NETFILTER/USER/$mac" || return 0
	else
		# maybe in /www/NETFILTER_AUTOADD is the ip from another day, so try another lookup
		for unexpected_ip in $( ip neigh | fgrep " $mac " | cut -d' ' -f1 ); do {
			if dev="$( _netfilter user_reachable "$mac" "$unexpected_ip" )"; then
				if [ "$unexpected_ip" = "$ip" ]; then
					_log do $funcname daemon alert "same IP $ip 2nd call to user_reachable() works - mac: $mac"
				else
					_log do $funcname daemon alert "taking another IP: $unexpected_ip (was: '$ip') mac: $mac"
					ip="$unexpected_ip"
				fi

				break
			else
				unexpected_ip=
			fi
		} done

		if [ -z "$unexpected_ip" ]; then
			# maybe it helps during bootup, reschedule once
			[ -n "$ip" ] && echo >>$SCHEDULER "_netfilter user_add $mac"

			_log do $funcname daemon info "[ERR] unreachable - mac: '$mac' ip: '$ip'"
			return 1
		else
			mkdir "/tmp/NETFILTER/USER/$mac" || return 0
		fi
	fi

	# in case we have an unscheduled reboot, autoadd at least for servers/wired
	_net dev_is_wifi "$dev" || {
		fgrep -q " add '$mac' '$ip' " '/www/NETFILTER_AUTOADD' || {
			fgrep -q " add '$mac' " '/www/NETFILTER_AUTOADD' && {
				case "$CONFIG_PROFILE" in
					liszt28*)	# removeme/debug
						cp "/www/NETFILTER_AUTOADD" "/www/NETFILTER_AUTOADD.$(date)"
					;;
				esac

				# hide/comment entry with other ip but same mac
				sed -i "s/^.*$mac/# IP changed # &/" '/www/NETFILTER_AUTOADD'
			}

			echo "/etc/dhcp-script.d/10dhcpscript add '$mac' '$ip' check_if_reachable	# $funcname() $(date)" >>'/www/NETFILTER_AUTOADD'
		}
	}

	# against spoofing, add "-s $ip"?
	$IPT -t mangle -I PREROUTING -d $ip -j ACCEPT
	# needed for batman, because mac can be changed from kernel-view:
	# https://lists.open-mesh.org/pipermail/b.a.t.m.a.n/2013-October/010722.html
	$IPT -t mangle -I PREROUTING -s $ip -j ACCEPT			# normally unneeded because of next rule
	$IPT -t mangle -I PREROUTING -m mac --mac-source $mac -j ACCEPT	# we should not see packets in above rule

	myhna="$( _netfilter myhna )"
	$IPT -t mangle -I PREROUTING -m mac --mac-source $mac -p udp --dport 53 ! -d $myhna -j MARK --set-mark 0x13
	$IPT -t mangle -I PREROUTING -m mac --mac-source $mac -p tcp --dport 53 ! -d $myhna -j MARK --set-mark 0x14
	$IPT -t mangle -I INPUT      -m mac --mac-source $mac -j ACCEPT

	cat >"/tmp/NETFILTER/USER/$mac/user_del" <<EOF
dev='$dev'
$IPT -t mangle -D INPUT      -m mac --mac-source $mac -j ACCEPT
$IPT -t mangle -D PREROUTING -m mac --mac-source $mac -p tcp --dport 53 ! -d $myhna -j MARK --set-mark 0x14
$IPT -t mangle -D PREROUTING -m mac --mac-source $mac -p udp --dport 53 ! -d $myhna -j MARK --set-mark 0x13
$IPT -t mangle -D PREROUTING -m mac --mac-source $mac -j ACCEPT
$IPT -t mangle -D PREROUTING -s $ip -j ACCEPT
$IPT -t mangle -D PREROUTING -d $ip -j ACCEPT
EOF

	_log do $funcname daemon info "mac: $mac ip: $ip"
	echo "$mac" >"/tmp/NETFILTER/IP2MAC/$ip"
	echo "$ip"  >"/tmp/NETFILTER/MAC2IP/$mac"
	touch "/tmp/vds_user_$mac"

	# maybe doing this for batman has side-effects
	# also: to be correct it must be done (only?) for gateway0/macvlan
	case "$dev" in
		'br-mybridge'|'gateway0')
		;;
		*)
			_netfilter set_arp permanent "$mac" "$ip" "$dev"
		;;
	esac

	# at least install some counters
	$IPT -t mangle -N outgoing_$mac
	$IPT -t mangle -N incoming_$mac

	$IPT -t mangle -A FORWARD -d $ip                            -j incoming_$mac
	$IPT -t mangle -A FORWARD -s $ip -m mac ! --mac-source $mac -j incoming_$mac
	$IPT -t mangle -A FORWARD        -m mac   --mac-source $mac -j outgoing_$mac

	cat >>"/tmp/NETFILTER/USER/$mac/user_del" <<EOF
$IPT -t mangle -D FORWARD        -m mac   --mac-source $mac -j outgoing_$mac
$IPT -t mangle -D FORWARD -s $ip -m mac ! --mac-source $mac -j incoming_$mac
$IPT -t mangle -D FORWARD -d $ip                            -j incoming_$mac
$IPT -t mangle -X incoming_$mac
$IPT -t mangle -X outgoing_$mac
EOF
	[ -e '/tmp/ENDBOOT' ] || {
		pidof ulogd >/dev/null && /etc/init.d/ulogd stop
		rmmod 2>/dev/null ipt_ULOG
		rmmod 2>/dev/null ipt_REDIRECT
		rmmod 2>/dev/null xt_state
	}

	bool_true 'system.@weblogin[0].hideandseek' && {
		_vpn hideandseek_user_add "$ip"
	}

	return 0
}

_netfilter_set_arp()
{
	local nudmode="$1"	# e.g permanent|reachable
	local mac="$2"
	local ip="$3"
	local dev="${4:-$( _net mac2dev "$mac" exact )}"

	[ -z "$dev" ] && return 1

	case "$mac" in
		'00:00:00:00:00:00')
			return 1
		;;
		*':'*)
			# ok
		;;
		*)
			mac="$( _net ip2mac "$ip" )" || return 1
		;;
	esac

	ip neigh add    $ip dev $dev lladdr $mac nud $nudmode 2>/dev/null
	ip neigh change $ip dev $dev lladdr $mac nud $nudmode 2>/dev/null

	return 0
}

_netfilter_user_probe()
{
	local mac="${1:-unset}"

	test -d "/tmp/NETFILTER/USER/$mac"
}

_netfilter_user_del()
{
	local funcname='netfilter_user_del'
	local mac="${1:-unset}"
	local reason="$2"
	local ip dev traffic comment message

	case "$reason" in
		*'dhcp_del'*)
			# ignore calls for users, which have a lease (again)
			grep -sq " $mac " "$( _net dhcp_lease_filename )" && {
				_log do $funcname daemon info "ignoring call for $mac - reason: $reason"
				return 1
			}
		;;
	esac

	[ "$mac" = 'all' ] && {
		for mac in $( _netfilter user_list ); do {
			_netfilter user_del "$mac" "$reason all"
		} done
	}

	[ -d "/tmp/NETFILTER/USER/$mac" ] && {
		read ip <"/tmp/NETFILTER/MAC2IP/$mac"

		bool_true 'system.@weblogin[0].logtraffic' && {
			comment="$reason $( _db user_macenabled_comment_get "$mac" )"
			traffic="$( _netfilter stats "$mac" megabytes )"
			message="mac: $mac ip: $ip traffic: $traffic mb comment: $comment"
			_log do $funcname daemon alert "$message"

			[ $traffic -gt 1000 ] && {
				_weblogin authserver_message "$funcname() $message"
			}
		}

		_netfilter traffic_control_user_del "$mac"

		bool_true 'system.@weblogin[0].hideandseek' && {
			_vpn hideandseek_user_del "$ip"
		}

		[ -e "/tmp/NETFILTER/USER/$mac/user_del" ] && {
			. "/tmp/NETFILTER/USER/$mac/user_del"
			_netfilter set_arp reachable "$mac" "$ip" "$dev"
		}

		rm -fR "/tmp/NETFILTER/USER/$mac" "/tmp/vds_user_$mac"
	}
}

_netfilter_user_shaping_add()
{
	local mac="$1"
	local upload="$2"
	local download="$3"
}

_netfilter_user_shaping_del()
{
	local mac="$1"
}

_netfilter_user_stats_process()
{
	local funcname='netfilter_user_stats_process'
	local server_ip url server_response mac line hash message= count=0
	local user_list="$( _netfilter user_list )"
	local ip unixtime_server unixtime_now datestring

	_netfilter user_stats_collect

	for mac in $user_list; do {
		[ -e "/tmp/NETFILTER/USER/$mac/stats" ] || continue

		local uptime_old= uptime uptime_diff time_used=0
		local bytes_incoming_old= bytes_incoming bytes_incoming_sum=0 bytes_incoming_diff
		local bytes_outgoing_old= bytes_outgoing bytes_outgoing_sum=0 bytes_outgoing_diff

		[ -e "/tmp/NETFILTER/USER/$mac/stats" ] || {
			bytes_incoming_old=0
			bytes_outgoing_old=0
		}

		while read line; do {
			set $line
			uptime="$1"
			bytes_incoming="$2"
			bytes_outgoing="$3"

			uptime_diff=$(( $uptime - ${uptime_old:-$uptime} ))
			uptime_old="$uptime"

			bytes_incoming_diff=$(( $bytes_incoming - ${bytes_incoming_old:-$bytes_incoming} ))
			bytes_incoming_old="$bytes_incoming"
			bytes_incoming_sum=$(( $bytes_incoming_sum + $bytes_incoming_diff ))

			bytes_outgoing_diff=$(( $bytes_outgoing - ${bytes_outgoing_old:-$bytes_outgoing} ))
			bytes_outgoing_old="$bytes_outgoing"
			bytes_outgoing_sum=$(( $bytes_outgoing_sum + $bytes_outgoing_diff ))

			[ $bytes_incoming_diff -gt 0 -o $bytes_outgoing_diff -gt 0 ] && {
				time_used=$(( $time_used + $uptime_diff ))
			}

		} done <"/tmp/NETFILTER/USER/$mac/stats"

		# CMA = client mac address
		# CIA = client ip address
		# CTU = client time used
		# CBI = client bytes incoming ("downloaded")
		# CBO = client bytes outgoing ("uploaded")
		# CAH = client authentication hash

		read ip </tmp/NETFILTER/MAC2IP/$mac
		[ $(( $bytes_incoming_sum + $bytes_outgoing_sum )) -eq 0 ] && {
#			_netfilter user_reachable "$mac" "$ip" >/dev/null || _netfilter user_del "$mac" 'no_traffic'

			continue	# dont generate any message for this user
		}

		if [ -e "/tmp/vds_user_$mac" ]; then
			read hash <"/tmp/vds_user_$mac"
		else
			hash=
		fi

		count=$(( $count + 1 ))
		mac="${mac//:/%3a}"		# urlencode
		message="${message}${message:+&}CMA_${count}=${mac}&CIA=${ip}&CTU_${count}=${time_used}&CBI_${count}=${bytes_incoming_sum}&CBO_${count}=${bytes_outgoing_sum}&CAH_${count}=${hash}"
	} done

	server_ip="$( _weblogin authserver )"

	case "$server_ip" in
		$LOADR|$WIFIADR|$LANADR|$WANADR)
			echo "UPTIME=${uptime}&REMOTE_ADDR=${WIFIADR}&${message}" >>"/tmp/COLLECT_DATA"
			server_response="OK"
		;;
		*)
			url="http://$server_ip/cgi-bin-collect.sh?${message}"
			server_response="$( _wget do "$url" 20 )"
		;;
	esac

	case "$server_response" in
		OK*|*:*)
			for mac in $user_list; do {
				mv "/tmp/NETFILTER/USER/$mac/stats" "/tmp/NETFILTER/USER/$mac/stats.lastsend"
			} done

			for mac in $server_response; do {
				case "$mac" in
					*:*)
						# add allowed macs from server to this station
						[ -e "/tmp/vds_user_$mac" ] || touch "/tmp/vds_user_$mac"
					;;
					'OK-UNIXTIME='*)
						unixtime_server="$( echo "$mac" | cut -d'=' -f2 )"
						unixtime_now="$( date +%s )"

						[ $(( $unixtime_now - $unixtime_server )) -gt 600 -o \
						  $(( $unixtime_server - $unixtime_now )) -gt 600 ] && {
							_log do $funcname daemon info "timeset to $unixtime_server - was: $unixtime_now"
							datestring="$( date -d @$unixtime_server "+%Y-%m-%d %H:%M:%S" )"
							date --set "$datestring"
						}
					;;
				esac
			} done
		;;
	esac
}
