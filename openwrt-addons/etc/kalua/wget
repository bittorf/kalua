#!/bin/sh

# this is a wrapper for 'wget', which works around a bug/behaviour
# which can lead to a hanging-daemon which will 'never' exit.
# ask the net for all sorts of strange corner cases.
#
# here we simply start 'wget' in background, wait some
# seconds (default: 15) and kill it (hard) if it's still there.

_wget_do()
{
	local funcname='wget_do'
	local url="$1"
	local max="${2:-15}"	# maximal running time in seconds, defaults to 15sec
	local option="$3"	# e.g. "noproxy" or "continue $filename" or combined: "noproxy,continue $filename"
	local mask1="$3"
	local mask2="$4"	# strings (e.g. passwords) from URL, which should be masked during logging, when prio is > debug
	local mypid=$$
	local http_proxy remaining_wgets pid_wget pid_line pid_line_now c=-1 rc=0
	local proxy_command file_option filename pid_background myerror
	local list_wget_pids_initial list_wget_pids_after_launch list_wget_pids_myself element

	case "$url" in
		*'localhost'*|*'127.0.0.1'*|*:[0-9]*)	# no PROXY for local URLs or URLs with special ports
		;;					# FIXME! be more correct: 127.0.0.0/8 + ipv6 or set env $no_proxy
		*)
			[ -n "$http_proxy" -a -z "$option" ] && {
				_log do $funcname daemon debug "using proxy from env $http_proxy"
				proxy_command='-Y on'
			}
		;;
	esac

	case "$option" in
		*'continue'*)
			filename="$( echo "$option" | cut -d' ' -f2 )"
			file_option='-c'
		;;
		*)
			filename='-'
			file_option=
		;;
	esac

	_log do $funcname daemon debug "max ${max}s, ${#url} bytes, wget $proxy_command -qO $filename $file_option '$url'"

	# get pids and fire the real 'wget':
	list_wget_pids_initial="$( pidof wget )"

	# autocleanup tempfiles. trapping 'RETURN' is not possible in POSIX
	trap 'rm /tmp/${funcname}_$mypid /tmp/${funcname}_$mypid.error 2>/dev/null' EXIT

	( wget $proxy_command -qO $filename $file_option "$url" 2>"/tmp/${funcname}_$mypid.error" || echo "$?" >"/tmp/${funcname}_$mypid" ) &
	pid_background=$!
	list_wget_pids_after_launch="$( pidof wget )" || list_wget_pids_after_launch=$(( pid_background + 2 ))
	# FIXME! sometimes pidof fails, but in fact _thereis_ a wget - fix the >65536 case!

	# remove, when the 'too early exit' bug is found
#	_log do $funcname daemon debug "pids: initial: '$list_wget_pids_initial' background: '$pid_background' after: '$list_wget_pids_after_launch'"

	# join PIDs initial + after_launch
	for element in $list_wget_pids_after_launch; do {
		_list contains_element "$list_wget_pids_initial" "$element" || {
			list_wget_pids_myself="$list_wget_pids_myself $element"
		}
	} done

	# get first pid of joined list
	for element in $list_wget_pids_myself; do {
		pid_wget="$element"
		break
	} done

	read -r myerror 2>/dev/null <"/tmp/${funcname}_$mypid.error" && {
		if [ ${#myerror} -eq 0 ]; then
			_log do $funcname daemon debug '[OK] no error message'
		else
			case "$myerror" in
				*'HTTP/1.1 404'*)
					_log do $funcname daemon info "[OK] $myerror"
					return 0
				;;
				*)
					# test with unresolveable: _wget do http://a.b.c.d/foo
					_log do $funcname daemon info "error: '$myerror'"
				;;
			esac
		fi
	}

	case "${pid_wget:-unset}" in
		'unset')
			if [ ${#myerror} -eq 0 ]; then
				_log do $funcname daemon debug '[OK] empty PID - this was lightning fast...'
			else
				_log do $funcname daemon debug '[ERR] empty PID - failed'
			fi

			return ${#myerror}
		;;
		*)
			# exact line like shown with 'ps'
			read -r pid_line 2>/dev/null <"/proc/$pid_wget/cmdline"
		;;
	esac

	# sanitize user input
	test $max -ge 0 -a $max -le 3600 || max=15

	while [ -e "/proc/$pid_wget" ]; do {				# wget-process in tasklist?
		sleep 1
		c=$(( c + 1 ))

		# maximal execution time reached?
		[ $c -ge $max ] && {
			pid_line_now=
			# keeps empty, when task has ended
			read -r pid_line_now 2>/dev/null <"/proc/$pid_wget/cmdline"

			# really the started process?
			[ "$pid_line" = "$pid_line_now" ] && {
				[ -n "$mask1" ] && {
					url="$( echo "$url" | sed -e "s/${mask1:-nomask1}/hidden/" -e "s/${mask2:-nomask2}/hidden/" )"
				}

				for element in $list_wget_pids_myself; do {
					_log do $funcname daemon info "error during fetching '$url' - killing PID '$element' after $c seconds"
					_watch hanging_command wget_selfkill $element
					_watch hanging_command wget_selfkill $element
				} done

				# FIXME! this is unneeded? and racy: we can kill other wgets which have just started
				[ -z "$list_wget_pids_initial" ] && {
					remaining_wgets="$( pidof wget )" && {
						_log do $funcname daemon info "leaving wgets: $remaining_wgets , do killall"
						killall wget
					}
				}

				# FIXME! check if still there? zombie? reboot?
				return 1
			}

			# OK, is another/new process with same PID
			return 0
		}
	} done

	# FIXME! code duplication, see above
	read -r myerror 2>/dev/null <"/tmp/${funcname}_$mypid.error" && {
		if [ ${#myerror} -eq 0 ]; then
			_log do $funcname daemon debug '[OK] no error message'
		else
			case "$myerror" in
				*'HTTP/1.1 404'*)
					_log do $funcname daemon info "[OK] $myerror"
					return 0
				;;
				*)
					# test with unresolveable: _wget do http://a.b.c.d/foo
					_log do $funcname daemon info "error: '$myerror'"
				;;
			esac
		fi
	}

	read -r rc 2>/dev/null <"/tmp/${funcname}_$mypid" && {
		_log do $funcname daemon info "[ERR] returning $rc after fetching '$url'"
	}

	return $rc
}
