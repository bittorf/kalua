_weblogin_splashscript ()
{
	if [ -e /usr/sbin/uhttpd ]; then
		echo -n "cgi-bin-welcome.sh"
	else
		echo -n "cgi-bin-welcome"
	fi
}


_weblogin_login_check()			# fixme! send HOSTNAME?
{					# fixme! answer must be a challenge/response:	// prevent replay attacks!
	local FUNC="weblogin_login_check"
	local USER="$1"			#        1. send hash of user/pass
	local PASS="$2"			#        2. server answers with hash_of(1+my_secret_sshid) + auth=true/false
	local MAC="$3"			#        3. we calc same hash and compare
	local SIGNAL="$4"
	local LANG="de"
	local KEYWORD="$6"		# can be 'plaintext'
	local FREE HASH GATEWAY ANSWER
	local URL PARAMETERS

	case "$( uci -q get system.@weblogin[0].auth_credentials )" in
		simple)
		;;
		*)
			USER="${USER:-$MAC}"		# check for mac-enabled devices, which gets a splash-screen
		;;
	esac

	strip_leading_and_trailing_tabs_and_spaces ()
	{
		local string="$1"

		echo "$string" | sed 's/^[ 	]*//;s/[ 	]*$//'
	}

	has_leading_or_trailing_tabs_or_spaces ()
	{
		local string="$1"

		case "$string" in
			" "*|*" ")		# spaces
				return 0
			;;
			"	"*|*"	")	# tabs
				return 0
			;;
			*)
				return 1
			;;
		esac
	}

	has_leading_or_trailing_tabs_or_spaces "$USER" && {
		_log do $FUNC daemon info "string tabs/spaces: username '$USER'"
		USER="$( strip_leading_and_trailing_tabs_and_spaces "$USER" )"
	}

	has_leading_or_trailing_tabs_or_spaces "$PASS" && {
		_log do $FUNC daemon info "string tabs/spaces: password '$PASS'"
		PASS="$( strip_leading_and_trailing_tabs_and_spaces "$PASS" )"
	}

	[ -n "$KEYWORD" ] && {
		KEYWORD="${USER}+${PASS}"
	}

	HASH="$( _db hash "${USER}${PASS}" )"

	mac_is_from_lan()
	{
		local mac="$1"
		local ip dev

		ip="$(  _net mac2ip "$mac" )"
		dev="$( _net ip2dev "$ip"  )"

		case "$dev" in
			$LANDEV)
				return 0
			;;
			*)
				return 1
			;;
		esac
	}

	if grep -sq "$HASH" "/tmp/USERDB_COPY"; then
		FREE=1
	else
		case "$CONFIG_PROFILE" in
			ffweimar*)
				case "$SIGNAL" in
					*dhcp*)
						if mac_is_from_lan "$MAC"; then
							FREE=1
						else
							_log do $FUNC daemon info "DHCP-mode, profile is $CONFIG_PROFILE - ignoring"
						fi
					;;
					*)
						_log do $FUNC daemon info "FREE, is profile $CONFIG_PROFILE"
						FREE=1
					;;
				esac
			;;
		esac
	fi

	if   [ "$FREE" = "1" ] ; then
		:
	elif [ -e /tmp/FREE ]; then
		_log do $FUNC daemon info "[OK] auth: existing /tmp/FREE"
		FREE=1
	elif [ -e /tmp/vds_user_${MAC:-mac_is_empty} ]; then
		_log do $FUNC daemon info "[OK] auth: existing /tmp/vds_user_$MAC"
		FREE=1
	else
		_log do $FUNC daemon info "query local db for '$HASH'"
		[ -n "$( _db user login query hash2id "$HASH" )" ] && {
			_log do $FUNC daemon info "[OK] auth: local db knows hash '$HASH'"
			FREE=1	# use local DB, if available - but also send logmsg to GW
		}
	fi

	[ "$FREE" = "1" ] || {
		GATEWAY="$( _weblogin authserver )"
		PARAMETERS="LOGIN=${HASH}&MAC=${MAC//:/%3a}&SIGNAL=${SIGNAL}&KEYWORD=${KEYWORD}&USER_LANG=${LANG}"

		if [ "${GATEWAY:-127.0.0.1}" = "127.0.0.1" -o "$GATEWAY" = "$WIFIADR" -o "$GATEWAY" = "$LANADR" ]; then
			ANSWER="$( /www/cgi-bin-sql.sh "$HASH" "$MAC" "$SIGNAL" "$KEYWORD" "$USER_LANG" )"
		else
			URL="http://${GATEWAY:-127.0.0.1}/cgi-bin-sql.sh"
			ANSWER="$( _wget do "${URL}?${PARAMETERS}" 5 )"
		fi

		[ ${#ANSWER} -gt 10 ] && ANSWER="shortened: $( _sanitizer do "$ANSWER" firstline length:30 )"

		_log do $FUNC daemon info "ANSWER: '$ANSWER' (1=ok) FREE: '$FREE' URL: '${URL:-locally_asked:}?${PARAMETERS}'"
	}

	[ "$ANSWER" = "1" -o "$FREE" = "1" ] && {
		[ -n "$MAC" ] && {
			echo "$HASH" >/tmp/vds_user_$MAC		# fixme! for building vds, use DB instead (easy/simple mac2hash)
			return 0
		}
	}

	case "$SIGNAL" in
		*"dhcp"*)
		;;
		*)
			case "$USER" in
				*":"*|"")	# macaddress OR empty
				;;
				*)
					_log do $FUNC daemon alert "wrong credentials: mac: $MAC user: '$USER' pass: '$PASS' hash: '$HASH'"
				;;
			esac
		;;
	esac

	return 1
}

_weblogin_metadata_locationname()
{
	local LANG="de"
	option="$2"
	local META="/www/images/weblogin_rules_${LANG}_meta"

	[ -e "$META" ] || {
		LANG="de"
		META="/www/images/weblogin_rules_${LANG}_meta"
	}

	[ -e "$META" ] && eval "$( sed 's/^/local /' $META )"

	case "$option" in
		advert_url)
			echo "$ADVERT_URL"
		;;
		advert_title)
			echo "$ADVERT_TITLE"
		;;
		walled_garden)
			echo "$WALLED_GARDEN"
		;;
		*)
			echo "${HOTELNAME:-Internet}"
		;;
	esac
}

_weblogin_authserver()
{
	local server

	is()
	{
		local server_ip="$1"

		case "$server_ip" in
			$WIFIADR|$LANADR)
				server="$WIFIADR"
			;;
			*)
				server="$server_ip"
			;;
		esac
	}

	case "$CONFIG_PROFILE" in
		*)
			server="$( uci -q get system.@weblogin[0].authserver )"
			[ -z "$server" ] && {
				read server 2>/dev/null </tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY
			}
		;;
	esac

	echo "$server"
}


