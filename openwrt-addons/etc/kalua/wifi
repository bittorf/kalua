# iw phy phy0 interface add moni0 type monitor; horst -i moni0; iw dev moni0 del

# cat /sys/kernel/debug/ieee80211/phy0/ath9k/wiphy

# Idee, wie man mit mehreren wlan-karten klarkommt: 
#    Erstes WIFI_DEV steht sowohl in normaler Variablenliste,
#    als auch in /tmp/wifi_$DEV zum includen. So werden Operationen
#    auf alle Elemente in der Liste gemacht:
#    (es muss also nur was included werden, wenn es mehrere wireless-karten gibt)
#    (bei einer wlan-karte gibt es kein $WIFI_DEV_NEXT)
#
# for WIFIDEV in $LIST_WIFIDEVS; do {
#	do_some_stuff_with_normal_vars
#	[ -n "$WIFI_NEXT" ] && . $WIFI_NEXT	# inluding VAR-set for next WIFI_DEV
# } done					# (last entry must point to first-device)


_wifi_show_station_traffic()
{
	local mac="$1"
	local wifidev="$2"
	local rx_old="$3"
	local tx_old="$4"
	local uptime_old="$5"
	local uptime="$( _system uptime centisec )"
	local line rx tx tx_human rx_human rx_diff tx_diff uptime_diff unit

	# while :; do eval $( _wifi show_station_traffic "$mac" $WIFIDEV $rx $tx $up ); sleep 60; done

	iw dev "$wifidev" station get "$mac" |
	 while read line; do {
		case "$line" in
			*"rx bytes:"*)
				set $line
				rx="$3"
			;;
			*"tx bytes:"*)
				set $line
				tx="$3"

				rx_human="$( _sanitizer do "$rx" number_humanreadable )"
				tx_human="$( _sanitizer do "$tx" number_humanreadable )"

				if [ -n "$rx_old" ]; then
					rx_diff=$(( $rx - $rx_old ))
					tx_diff=$(( $tx - $tx_old ))
				else
					rx_diff=0
					tx_diff=0
				fi

				if [ -n "$uptime_old" ]; then
					unit="bytes/s"
					uptime_diff=$(( $uptime - $uptime_old ))

					rx_diff=$(( ($rx_diff * 100) / $uptime_diff ))
					tx_diff=$(( ($tx_diff * 100) / $uptime_diff ))
				else
					unit="bytes"
				fi

				echo "echo '# overall: tx/rx: $rx_human/$tx_human  diff_rx/tx: $rx_diff/$tx_diff $unit';"
				echo "rx=$rx; tx=$tx; up=$uptime;"
			;;
		esac
	} done
}

_wifi_tx_and_rx ()		# ARG1 = NETWORK_DEV e.g. WIFI_DEV
{
	# WIFI_RX_BYTES=1665694551
	# WIFI_RX_PACKETS=22019893
	# WIFI_RX_ERRORS=0
	# WIFI_RX_FRAMES=109127
	# WIFI_TX_BYTES=2572111365
	# WIFI_TX_PACKETS=22193801
	# WIFI_TX_ERRORS=3

	local FILE="/proc/net/dev"

	sed -n "s/^.*$1: *\([0-9]*\) *\([0-9]*\) *\([0-9]*\) *[0-9]* *[0-9]* *\([0-9]*\) *[0-9]* *[0-9]* *\([0-9]*\) *\([0-9]*\) *\([0-9]*\) .*/WIFI_RX_BYTES=\1\nWIFI_RX_PACKETS=\2\nWIFI_RX_ERRORS=\3\nWIFI_RX_FRAMES=\4\nWIFI_TX_BYTES=\5\nWIFI_TX_PACKETS=\6\nWIFI_TX_ERRORS=\7/p" "$FILE"
}

_wifi_params_iwconfig_status ()		# ARG1 = WIFI_DEV
{
	# WIFI_DEV=eth1
	# WIFI_UPTIME=0
	# WIFI_ESSID='www.freifunk.net (Zugangspunkt)'  	# fixme! single quotes are not correct escaped!
	# WIFI_MODE="Managed"
	# WIFI_FREQ=2442					# in MHz ! -> convert to Channel?
	# WIFI_CHANNEL="$( _wifi math_mhz2channel 2442 )"	# this is converted during 'eval'
	# WIFI_BSSID=00:1D:73:05:0F:59  
	# WIFI_SENSITIVITY="0/3"
	# WIFI_RETRY=off
	# WIFI_RTS=256
	# WIFI_FRAG=off
	# WIFI_QUALITY=52
	# WIFI_QUALITY_MAX=94
	# WIFI_SIGNAL='-43'
	# WIFI_NOISE='-95'
	# WIFI_TXPOWER=20	// only seen with atk9k/mac80211

				# fixme! sometimes iwconfig-output is empty

	/usr/sbin/iwconfig $1 2>/dev/null |
	 sed -ne "s/^.*ESSID:\"\(.*\)\"/WIFI_DEV=$1\nWIFI_UPTIME=0\nWIFI_ESSID='\1'/p" \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Access Point: \(.*\)Tx-Power=\([0-9]*\) dBm.*/WIFI_MODE=\1;WIFI_TXPOWER=\3;/p' \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Frequency:\([0-9]\)\.\([0-9]*\).*Access Point: \(..:..:..:..:..:..\)/WIFI_MODE="\1"\nWIFI_FREQ=\2\3\nWIFI_CHANNEL=\"\$( _wifi math_mhz2channel \2\3 )\"\nWIFI_BSSID=\4/p' \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Frequency:\([0-9]\)\.\([0-9]*\).*Cell: \(..:..:..:..:..:..\)/WIFI_MODE="\1"\nWIFI_FREQ=\2\3\nWIFI_CHANNEL=\"\$( _wifi math_mhz2channel \2\3 )\"\nWIFI_BSSID=\4/p' \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Frequency:\([0-9]\)\.\([0-9]*\).*Cell: Not-Associated/WIFI_MODE="\1"\nWIFI_FREQ=\2\3\nWIFI_CHANNEL=\"\$( _wifi math_mhz2channel \2\3 )\"\nWIFI_BSSID=\4/p' \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Frequency:\([0-9]\)\.\([0-9]*\).*Tx-Power=\([0-9]*\) dBm.*/WIFI_MODE="\1"\nWIFI_FREQ=\2\3\nWIFI_CHANNEL=\"\$( _wifi math_mhz2channel \2\3 )\"\nWIFI_TXPOWER=\4/p' \
	     -ne 's/^.*Mode:\([- a-zA-Z]*[a-zA-Z]\).*Tx-Power=\([0-9]*\) dBm.*/WIFI_MODE=\1;WIFI_TXPOWER=\2;/p' \
	     -ne 's/^.*Bit Rate:.*Tx-Power:.*Sensitivity=\([0-9]*\)\/\([0-9]*\).*/WIFI_SENSITIVITY="\1\/\2"/p' \
	     -ne 's/^.*Retry.\([a-z0-9]*\)[^a-zA-Z0-9]*RTS thr.\([a-z0-9]*\)[^0-9a-zA-Z]*Fragment thr.\([a-z0-9]*\).*/WIFI_RETRY="\1"\nWIFI_RTS="\2"\nWIFI_FRAG="\3"/p' \
	     -ne "s/^.*Link Quality[:=]\([0-9]*\)\/\([0-9]*\).*Signal level[:=]\([-0-9]*\) dBm.*Noise level[:=]\([-0-9]*\) dBm/WIFI_QUALITY=\1\nWIFI_QUALITY_MAX=\2\nWIFI_SIGNAL='\3'\nWIFI_NOISE='\4'/p"
}

_wifi_vendor_and_model ()		# fixme! build lookup-table WIFIDEV -> vendor|model
{
	local WIFI_DEV="$1"

	_wifi vendor_and_model_pci

	case "$HARDWARE" in
		"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"Dell TrueMobile 2300")
		;;
		*)
			_wifi vendor_and_model_usb
		;;
	esac
}

_wifi_vendor_and_model_pci ()			# output can be more than one, how to handle?
{						# ARG1 = WIFI_DEV
	local FILE="/proc/bus/pci/devices"	# evalable_output: WIFI_VENDOR=broadcom;WIFI_MODEL=4318;WIFI_BANDS='b g'

	# Atheros5413 = AR5006X-family = MikroTik RouterBOARD R5H (miniPCI)

	if fgrep -q "0" "$FILE"; then		# dirty but works

		sed	-ne "/168c001b/c\WIFI_VENDOR=atheros ;WIFI_MODEL=5413 ;WIFI_BANDS='a'" \
			-ne "/14e44318/c\WIFI_VENDOR=broadcom;WIFI_MODEL=4318 ;WIFI_BANDS='b g'" \
			-ne "/14e44320/c\WIFI_VENDOR=broadcom;WIFI_MODEL=4306 ;WIFI_BANDS='b g'" \
			-ne "/14e44319/c\WIFI_VENDOR=broadcom;WIFI_MODEL=4319 ;WIFI_BANDS='b g a'" \
			-ne "/168c0012/c\WIFI_VENDOR=atheros ;WIFI_MODEL=5211a;WIFI_BANDS='b g a'" \
			-ne "/168c0013/c\WIFI_VENDOR=atheros ;WIFI_MODEL=5212a;WIFI_BANDS='b g a'" \
			-ne "/168c002a/c\WIFI_VENDOR=atheros ;WIFI_MODEL=AR928X;WIFI_BANDS='a'" \
			"$FILE"
	else
		FILE="/tmp/WIFI_VENDOR_AND_MODEL"

		[ -e "$FILE" ] || {
			if   grep -q "Atheros AR9100 MAC/BB Rev:[0-9a-zA-Z]* AR2133" "/tmp/dmesg.boot"; then
				echo "WIFI_VENDOR=atheros;WIFI_MODEL=2133;WIFI_BANDS='b g'" >"$FILE"
			elif fgrep -q "b43-phy0: Broadcom 5352" "/tmp/dmesg.boot"; then
				echo "WIFI_VENDOR=broadcom;WIFI_MODEL=5352;WIFI_BANDS='b g'" >"$FILE"
			else
				echo "WIFI_VENDOR=unknown;WIFI_MODEL=unknown;WIFI_BANDS='b g'" >"$FILE"
			fi
		}

		cat "$FILE"
	fi
}

_wifi_vendor_and_model_usb ()
{
	# WIFI_VENDOR=ralink;WIFI_MODEL=rt73usb

	sed -ne "/Vendor=148f ProdID=2573/cWIFI_VENDOR=ralink;WIFI_MODEL=rt73usb;WIFI_BANDS='b g'" /proc/bus/usb/devices 2>/dev/null
}

_wifi_driver_version()
{
	local WIFI_DEV="$1"		# fixme! howto connect DEV -> PHY  (DEV -> DRIVER is no problem)
	local VERSION

	VERSION="kmod-ath9k_v$( _software package_version kmod-ath9k )"

	echo "$VERSION"
}

_wifi_phy_uptime()
{
	local wifi_dev="$1"
	local uptime_now="$( _system uptime sec )"
	local last_restart=0
	local file="/tmp/STATS_WIFI_RESTARTS.$wifi_dev.time"

	[ -e "$file" ] && {
		read last_restart <"$file"
	}

	echo $(( $uptime_now - $last_restart ))
}

_wifi_phy_restart()
{
	local funcname="wifi_phy_restart"
	local wifi_dev="$1"
	local reason="${2:-no_reason_given}"
	local prio="${3:-alert}"

	local uptime="up $( _wifi phy_uptime "$wifi_dev" ) sec"
	_watch counter "/tmp/STATS_WIFI_RESTARTS.$wifi_dev" increment 1
	_system uptime sec >"/tmp/STATS_WIFI_RESTARTS.$wifi_dev.time"

	eval $( _wifi tx_and_rx $wifi_dev )
	local vals_rx="rx:bytes/packets/errors/frames $WIFI_RX_BYTES/$WIFI_RX_PACKETS/$WIFI_RX_ERRORS/$WIFI_RX_FRAMES"
	local vals_tx="tx_bytes/packets/errors: $WIFI_TX_BYTES/$WIFI_TX_PACKETS/$WIFI_TX_ERRORS"

	echo "$reason: $uptime $vals_rx $vals_tx" >"/tmp/STATS_WIFI_RESTARTS.$wifi_dev.reason"
	_log do $funcname daemon $prio "working on '$wifi_dev' ($reason) $uptime $vals_rx $vals_tx"

	local line mac adduser
	local userlist="$( _netfilter user_list )"
	while read line; do {
		case "$line" in
			*"$wifi_dev")
				set -- $line
				mac="$4"

				case "$userlist" in
					*"$mac"*)
						adduser="$adduser $mac"
					;;
				esac
			;;
		esac
	} done <"/proc/net/arp"

	# fixme! how to restart a specific interface?
	/sbin/wifi down
	_log sleep $funcname 10 step 1
	_system uptime sec >"/tmp/STATS_WIFI_RESTARTS.$wifi_dev.time"
	/sbin/wifi up | grep -q "PHY for wifi device radio. not found" && {
		_log do $funcname daemon alert "message: PHY for wifi device radioX not found"
		return 1
	}

	grep -q ^"b43 " "/proc/modules" && {
		[ "$( uci -q get wireless.@wifi-iface[0].mode )" = "adhoc" ] || {
			iw dev $wifi_dev set bitrates legacy-2.4 6 9 12 18 24 36 48 54
		}
	}

	local ip
	for mac in $adduser; do {
		read ip <"/tmp/NETFILTER/MAC2IP/$mac"
		_netfilter make_arp_permanent "$mac" "$ip" "$wifi_dev"
	} done

	local users
	local file="/tmp/TRAFFIC_CONTROL_UP_${wifi_dev}"
	[ -e "$file" ] && {
		read users <"$file"
		_netfilter traffic_control_stop

		for mac in $users; do {
			read ip <"/tmp/NETFILTER/MAC2IP/$mac"
			_netfilter traffic_control_user_add "$ip"
		} done
	}

	_system uptime sec >"/tmp/STATS_WIFI_RESTARTS.$wifi_dev.time"
	return 0
}

_wifi_math_mhz2channel ()		# http://en.wikipedia.org/wiki/Lost_of_WLAN_channels
{
	local o				# idea: add to each freq regdomain/countrycode
					#       and choose corresponding countrycode, which fits channel 8-)
	case $1 in
		2412) o=1 ;;  # 276	# block of 802.11b/g/n-freqs
		2417) o=2 ;;  # 276
		2422) o=3 ;;  # 276
		2427) o=4 ;;  # 276
		2432) o=5 ;;  # 276
		2437) o=6 ;;  # 276
		2442) o=7 ;;  # 276
		2447) o=8 ;;  # 276
		2452) o=9 ;;  # 276
		2457) o=10 ;; # 276
		2462) o=11 ;; # 276
		2467) o=12 ;; # 276
		2472) o=13 ;; # 276
		2484) o=14 ;;

					# block of 802.11y ommited

		5035) o=7 ;;		# block of 802.11a/h/j/n
            504|5040) o=8 ;;
		5045) o=9 ;;		# fixme! mark 'outdoor'-channels
		5055) o=11 ;;
	    506|5060) o=12 ;;
            508|5080) o=13 ;;

	    517|5170) o=34 ;;
	    518|5180) o=36 ;; # 608 
	    519|5190) o=38 ;;
	     52|5200) o=40 ;; # 608
	    521|5210) o=42 ;; #	608	# TURBO.only	# for TURBO, see http://madwifi-project.org/wiki/UserDocs/802.11a_channels
	    522|5220) o=44 ;; # 608
	    523|5230) o=46 ;;
	    524|5240) o=48 ;; # 608
	    525|5250) o=50 ;; # 608	# TURBO.only	# not listed in wikipedia?
	    526|5260) o=52 ;; # 608
	    528|5280) o=56 ;; # 608
	    529|5290) o=58 ;; # 608	# TURBO.only	# not listed in wikipedia?
	     53|5300) o=60 ;; # 608
	    532|5320) o=64 ;; # 608

	     55|5500) o=100 ;; # 276	# iwconfig-output is '55' and means 5500mhz!
	    552|5520) o=104 ;; # 276
	    553|5530) o=106 ;; # 276	# not listed in wikipedia?
	    554|5540) o=108 ;; # 276
	    556|5560) o=112 ;; # 276
	    557|5570) o=114 ;; # 276	# not listed in wikipedia?
	    558|5580) o=116 ;; # 276
	     56|5600) o=120 ;; # 276
	    561|5610) o=122 ;; # 276	# not listed in wikipedia?
	    562|5620) o=124 ;; # 276
	    564|5640) o=128 ;; # 276
	    565|5650) o=130 ;; # 276	# not listed in wikipedia?
	    566|5660) o=132 ;; # 276
	    568|5680) o=136 ;; # 276
	     57|5700) o=140 ;; # 276
		5745) o=149 ;;
	    576|5760) o=152 ;;	# TURBO.only	# not listed in wikipedia?	# BFWA
		5765) o=153 ;;							# BFWA
		5785) o=157 ;;							# BFWA
	     58|5800) o=160 ;;	# TURBO.only	# not listed in wikipedia?	# BFWA
		5805) o=161 ;;							# BFWA
		5825) o=165 ;;							# BFWA
	    583|5830) o=166 ;;							# BFWA
	        5835) o=167 ;;							# BFWA
	    584|5840) o=168 ;;							# BFWA
		5845) o=169 ;;							# BFWA
	    585|5850) o=170 ;;							# BFWA
		5855) o=171 ;;							# BFWA
	    586|5860) o=172 ;;							# BFWA
		5865) o=173 ;;							# BFWA
	    587|5870) o=174 ;;							# BFWA
		5875) o=175 ;;							# BFWA
		
		4915) o=183 ;;
	    492|4920) o=184 ;;
		4925) o=185 ;;
		4935) o=187 ;;
	    494|4940) o=188 ;;
		4945) o=189 ;;
	    496|4960) o=192 ;;
	    498|4980) o=196 ;;
					# wl also knows: 200, 204, 208, 212, 216
					# oswave.com -> 220/6100mhz, 234...250 (4920...5000mhz), 1...6 (5005....5030)
					
		   *) o=0 ;;		# fixme! till we inserted all freqs
	esac

	echo -n "$o"
}

_wifi_assoclist ()		# OUT1: list of associated mac_adresses
{
	return 0
}

_wifi_probe_mode_infrastructure ()		# fixme! respect WIFI_DEV
{
	local WIFI_DEV="$1"
	local SWITCH="$2"	# 'config' or <empty>
	local WIFI_MODE

	if [ "$SWITCH" = "config" ]; then

		case "$( uci -q get wireless.@wifi-iface[0].mode )" in
			adhoc)
				return 1
			;;
			sta)
				return 1	# fixme! workaround for uci-wrapper
			;;
			*)
				return 0
			;;
		esac
	else
		eval "$( _wifi params_iwconfig_status $WIFI_DEV | grep ^WIFI_MODE= )"

		case $WIFI_MODE in
			Managed|managed|Master|master) return 0 ;;
						    *) return 1 ;;
		esac
	fi
}

_wifi_probe_mode_ap ()				# fixme! respect WIFI_DEV
{
	local funcname="wifi_probe_mode_ap"
	local WIFI_DEV="$1"
	local SWITCH="$2"	# 'config' or <empty>
	local WIFI_MODE

	if [ "$SWITCH" = "config" ]; then

		if [ "$( uci -q get wireless.@wifi-iface[0].mode )" = "ap" ]; then
			return 0
		else
			return 1
		fi
	else
		eval "$( _wifi params_iwconfig_status $WIFI_DEV | grep ^WIFI_MODE= )"

		case $WIFI_MODE in
			Master|master)
				return 0
			;;
			Managed|managed)
				return 1
			;;
			Ad-Hoc)
				return 1
			;;
			*)
				_log do $funcname daemon info "unknown mode '$WIFI_MODE'"
				return 1
			;;
		esac
	fi
}

_wifi_mode ()			# OUT1: string, ap | client | adhoc             // rename: wifi_get_mode_conn?
{
	local funcname="wifi_mode"
	local WIFI_DEV="$1"	# fixme! some calls can't provide wifidev - till now we only check nvram, so it does'nt matter
	local SWITCH="$2"	# can be 'config' or <empty>

	fgrep -q "${WIFI_DEV:-no_wifi}:" /proc/net/dev || {
		_log do $funcname daemon debug "wifidev ${WIFI_DEV:-no_wifi} not found"
		return 1
	}

	local mode1="$( uci -q get wireless.@wifi-iface[0].mode )"
	local mode2="$( uci -q get wireless.@wifi-iface[1].mode )"

	case "$mode1" in
		ap|adhoc)
			case "$mode2" in
				ap|adhoc)
					echo "${mode1}${mode2}"		# fixme! we dont diff between config/real
					return				# fixes e.g. compare_config_and_real_wifi_mode() in watch()
				;;
			esac
		;;
	esac

	if _wifi probe_mode_infrastructure $WIFI_DEV "$SWITCH" ; then
	
		if _wifi probe_mode_ap $WIFI_DEV "$SWITCH" ; then
			echo 'ap'
		else
			echo 'client'	# fixme! output 'sta' or 'station' ?
		fi
	else
		if _wifi probe_mode_ap $WIFI_DEV "$SWITCH" ; then
			echo 'unknown'	
		else
			echo 'adhoc'
		fi
	fi
}

_wifi_check_each_client()
{
	local mac ip list_macs exitcode list_already_known_macs local up1 up2 up_diff
	local funcname="wifi_check_each_client"
	local max_arping="10"
	local statsdir="/tmp/$funcname"

	mkdir -p "$statsdir"
	_net include

	list_macs="$( iw dev $WIFIDEV station dump | grep ^Station | cut -d' ' -f2 )"

	for mac in $list_macs; do {		# fixme! only check client with low inactivity time
		[ "$exitcode" = "0" ] || {
			ip="$( _net mac2ip $mac )" && {
				if arping -q -f -c $max_arping -I $WIFIDEV $ip ; then
					_log do $funcname daemon debug "[OK] arping - mac: $mac ip: $ip"
					exitcode="0"
				else
					_log do $funcname daemon info "[ERR] arping - mac: $mac ip: $ip (no success for $max_arping probes)"
					# iw dev "$WIFIDEV" station del "$mac"
					exitcode="1"
				fi
			}
		}

		[ -e "$statsdir/$mac" ] || {
			_log do $funcname daemon info "[OK] detected new station $mac"
			_system uptime >"$statsdir/$mac"
		}
	} done

	station_is_valid()
	{
		iw dev $WIFIDEV station get "${1:-unset}" 2>/dev/null >/dev/null
	}

	list_already_known_macs="$( ls -1 "$statsdir" 2>/dev/null )"

	for mac in $list_already_known_macs; do {		# fixme! writeout traffic_counter
		station_is_valid "$mac" || {
			up2="$( _system uptime )"
			read up1 <"$statsdir/$mac"
			rm "$statsdir/$mac"
			up_diff="$(( $up2 - $up1 ))"

			_log do $funcname daemon alert "[OK] station $mac left network $WIFIDEV, ($( _stopwatch seconds2humanreadable $up_diff ))"
		}
	} done

	return ${exitcode:-0}
}
