_system_maintenance_window_active()
{
	case "$( date +%H )" in
		02|03|04)
			return 0
		;;
	esac

	test -e /tmp/MAINTENANCE
}

_system_architecture()
{
  local file='/tmp/system_architecture'
	local arch DISTRIB_TARGET

	[ -e "$file" ] || {
		# prevents chicken/egg problem with software_opkg_raminstaller()
		which $OPKG >/dev/null && {
			# e.g. Architecture: ramips_24kec
			arch="$( _software package_status kernel | grep ^'Architecture:' )"
			arch="${arch#*: }"
			arch="${arch%%_*}"
		}

		if [ -n "$arch" ]; then
			echo "$arch" >"$file"
		else
			# DISTRIB_TARGET='ar71xx/generic'
			# DISTRIB_TARGET='brcm47xx/generic'
			# DISTRIB_TARGET="rb532/generic"
			# DISTRIB_TARGET="ramips/generic"

			if [ -e '/etc/openwrt_release' ]; then
				eval $( grep ^'DISTRIB_TARGET=' '/etc/openwrt_release' )
				arch="$DISTRIB_TARGET"
				arch="${arch%%/*}"
			else
				arch="$( uname -m )"			# e.g. 'x86_64' or 'mips'
				[ "$arch" = 'i686' ] && arch='x86'	# debian
			fi

			echo "$arch" >"$file"
		fi
	}

	cat "$file"
}

_system_get_first_pid ()	# pidof returns an arbitrary sorted list, so we have to sort to get the lowest
{
	local processname="$1"
	local list_pids="$( pidof $processname )"
	local pid
	local max_pid=32767	# -> /proc/sys/kernel/pid_max -1 on kernel >= 2.5
	local min_pid=$max_pid

	for pid in $list_pids; do {
		[ $pid -lt $min_pid ] && {
			min_pid=$pid	
		}
	} done

	[ "$max_pid" = "$min_pid" ] || echo $min_pid
}

_system_globbing ()
{
	local STATE="$1"	# list conditions: 'set +o'
	
	case "$STATE" in
		off)
			set -f
		;;
		*)
			set +f
		;;
	esac
}

_system_version()	# fixme! use /etc/openwrt_version | /etc/openwrt_release
{
	local option="$1"				# e.g. "short"
	local file="/etc/freifunk-release"

	if [ -e "$file" ]; then

		case "$option" in
			short)
				head -n1 "$file"			# e.g. '1.6.37'
			;;
			*)
				grep ^Kit: "$file"			# e.g. 'fff_plus-26c3-000-12Feb2010-08uhr48'
			;;
		esac
	else
		if [ -e "/rom/etc/banner" ]; then
			file="/rom/etc/banner"
		else
			file="/etc/banner"
		fi

		case "$option" in
			short)
				sed -n 's/^.*, r\([0-9]*\)[^0-9]*/\1/p' "$file"		# e.g. '24300'
			;;
			*)
				sed -n 's/^.*, r\([0-9]*\)[^0-9]*/git\1/p' "$file"	# e.g. 'git24300'	// fixme!
			;;
		esac
	fi
}

_system_reboot_safe()				# fixme! maybe shutting down services like vpn, olsrd?
{						# fixme! safe vds-data? rrd-data?
	local FUNC="system_reboot_safe"
	local REASON="$1"
	local LOCKFILE="/tmp/SAFE_REBOOT_SCHEDULED"

	_linklocal wifi_users $WIFIDEV >/dev/null && {
		_log do $FUNC daemon info "waiting till all wifi-clients disconnect, rescheduling myself"

		echo -e "#!/bin/sh\nrm \$0\n. /tmp/loader\n_system reboot_safe '$1'" >/tmp/.autorun	# cron.minutely calls this
		chmod +x /tmp/.autorun

		return
	}

	[ -e  "$LOCKFILE" ] && return
	touch "$LOCKFILE"

	[ -e "/tmp/outgoing_mail_"* ] && {
		mkdir -p "/www/cgi-bin/mail"
		mv "/tmp/outgoing_mail_"* "/www/cgi-bin/mail"
	}

	/usr/sbin/owm.lua

	_log do $FUNC daemon alert "scheduling reboot - reason: '$REASON'"

	tail -n1 /tmp/ARCHIV_MONITORING | grep -q ^# || {			# found comment at fileend

		_log do $FUNC daemon info "send_alive_message was unsuccessful, backing up '/tmp/ARCHIV_MONITORING'"		

		local LINENUMBER_LAST_SUCCESS="$( grep -n "^#" /tmp/ARCHIV_MONITORING | tail -n1 | cut -d':' -f1 )"
		sed -n "$(( $LINENUMBER_LAST_SUCCESS + 1 )),\$p" /tmp/ARCHIV_MONITORING >/www/backup_archiv_node_data
	}

	if [ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then			# fixme! check free flash space?
	
		_log do $FUNC daemon info "safing syslog to '/www/SYSLOG_SAFED'"
		grep -v "kern.err olsrd" /var/log/messages >/www/SYSLOG_SAFED		# we don't need the "add route/del route" errors
	else
		_log do $FUNC daemon info "safing last 100 lines of syslog to '/www/SYSLOG_SAFED'"
		grep -v "kern.err olsrd" /var/log/messages | tail -n 100 >/www/SYSLOG_SAFED
	fi	

	_log do $FUNC daemon info "flash free: '$( _system flash_free )', rebooting in 10 sec"

	sync			# not needed? flush_cache() is also called during reboot()
	sleep 10		# fixme! maybe we should wait till crondog works or enforce crondog-timeout

	if [ -e /rom/sbin/reboot ]; then
		/rom/sbin/reboot
	else
		reboot
	fi

	sleep 20		# just to be sure, that no further commands are executed
}

_system_load ()			# load without comma, e.g.
{				# 1.00 = 100 or 12.89 = 1289 or 0.05 = 5
	local TIME="$1"
	local FORMAT="$2"	# e.g. full or <empty>

	local CPULOAD DECIMALS NOP OUT

	case "$TIME" in
		1min)
			IFS='. '; read CPULOAD DECIMALS NOP </proc/loadavg; unset IFS
		;;
		5min)
			IFS='. '; read CPULOAD DECIMALS CPULOAD DECIMALS NOP </proc/loadavg; unset IFS
		;;
		15min)
			IFS='. '; read CPULOAD DECIMALS CPULOAD DECIMALS CPULOAD DECIMALS NOP </proc/loadavg; unset IFS
		;;
		*)
			CPULOAD=000
		;;
	esac

	case "$FORMAT" in
		full)
			OUT="${CPULOAD}.${DECIMALS}"
		;;
		*)
			OUT="${CPULOAD}${DECIMALS}"
			OUT="${OUT#0}"				# cut off leading zero's
			OUT="${OUT#0}"
		;;
	esac
	
	echo "${OUT:-100}"
}

_system_disc_free()
{
	local disc="$1"		# e.g. /tmp
	local unit="$2"		# defaults to [kilobytes]

	local line="$( df | grep " $disc"$ )"
	set ${line:-0 0 0 0}

	case "$unit" in
		percent)
			local percent_used="${5%[%]*}"		# 89% -> 89
			echo $(( 100 - ${percent_used:-0} ))
		;;
		kilobytes|*)
			echo "$4"
		;;
	esac
}

_system_flash_free()
{
	local unit="$1"

	_system disc_free "/overlay" $unit
}

_system_flash_size()	# [kByte]		// fixme! seems to be device-specific
{
	local file="/tmp/FLASHSIZE"
	local partition

	partition="/dev/mtdblock5"
	[ -e "$partition" ] || partition="/dev/mtdblock4"	# targa wr 500 voip

	[ -e "$file" ] || {
		echo >"$file" $(( $( wc -c <"$partition" ) / 1024 ))
		[ "$( cat "$file" )" -lt 4096 ] && touch "/tmp/LOWFLASH"
	}

	cat "$file"
}

_system_uptime()		# OUT1 = string
{				# ARG1 = string: plain|centisec|sec|min|hour|days|humanreadable
	local FORMAT="$1"
	local OPTION="$2"
	local UPTIME FLOAT NOP
	
	IFS='. '
	read UPTIME FLOAT NOP </proc/uptime		# reads integer = seconds
	unset IFS

	case $FORMAT in
		humanreadable)
			UPTIME="$( _stopwatch seconds2humanreadable $UPTIME )"
		;;
		sec)
			:
		;;
		min)
			UPTIME=$(( $UPTIME / 60 ))
		;;
		h|hour|hours)
			UPTIME=$(( $UPTIME / 3600 ))
		;;
		days)
			UPTIME=$(( $UPTIME / 86400 ))
		;;
		centisec|centi)
			UPTIME="${UPTIME}${FLOAT}"
		;;
		plain)
			UPTIME="$UPTIME.$FLOAT"
		;;
	esac
	
	echo "${OPTION}$UPTIME"
}

_system_date()				# fixme! set a fixed path for the binary?
{					# fixme! make a new class _date()?
	local FORMAT="$1"

	case "$FORMAT" in
		humanreadable)
			case "$2" in
				short)
					_sanitizer do "$( date +%Y%b%d )" lowercase		# 2008oct12
				;;
				nice)
					date "+%d.%b'%y-%H:%M"					# 06.May'08-18:10
				;;
				*)
					_sanitizer do "$( date +%Y%b%d_%H:%M )" lowercase	# 2008oct12_20:25
				;;
			esac
		;;
		full)
			date						# Mon Sep 28 09:08:04 CEST 2009
		;;
		unixtime)
			date +%s					# 1254121912
		;;
		mail)							# Wed, 7 May 2008 16:04:59 +0200
			
			echo "$( date +%a ), $( date +%e | sed 's/ //' ) $( date "+%b %Y %X %z" | sed 's/-0/+0/' )"
		;;
		unixtime2date)
			date -d @$2
		;;
		2unixtime)
			local DATE="$2"		# output of 'date', e.g. "Tue Mar  9 11:07:44 CET 2010"
						# fixme! uname -a: "5 Mon Apr 11 11:24:07 CEST 2011"
						# fixme! uname -a: "1 So 4. Okt 13:34:39 CEST 2009"

			local WEEKDAY MONTH DAY TIME ZONE YEAR HOUR MIN SEC UNIXTIME
	
			read WEEKDAY MONTH DAY TIME ZONE YEAR <<EOF
$DATE
EOF
			case "$MONTH" in
				Jan|jan) MONTH="01" ;;
				Feb|feb) MONTH="02" ;;
				Mar|mar) MONTH="03" ;;
				Apr|apr) MONTH="04" ;;
				May|may) MONTH="05" ;;
				Jun|jun) MONTH="06" ;;
				Jul|jul) MONTH="07" ;;
				Aug|aug) MONTH="08" ;;
				Sep|sep) MONTH="09" ;;
				Oct|oct) MONTH="10" ;;
				Nov|nov) MONTH="11" ;;
				Dec|dec) MONTH="12" ;;
			esac

			case "$DAY" in
				[1-9]) DAY="0$DAY" ;;
			esac
		
			IFS=":"
			read HOUR MIN SEC <<EOF
$TIME
EOF
			unset IFS

			date --date "${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC}" +%s
		;;
		evalable)
			date "+DATE=\"%b %d %H:%M:%S\""
		;;
		*)
			date "+%b %d %H:%M:%S"				# Sep 28 09:01:54
		;;
	esac
}

_system_pids_count ()
{
	local PROCESS_NAME="$1"		# e.g. 'wifi' or 'xrelayd'
	local N=0			#      pidof wifi: '5736 5779 6314 6317 6499'
	local PID

	for PID in $( pidof "$PROCESS_NAME" ); do N=$(( $N + 1 )); done
	echo $N
}

_system_ram_free()	# [bytes]
{
	local MEM LINE
	local OPTION="$1"	# eval-hack OR flush

	[ "$OPTION" = "flush" ] && {
		OPTION=

		[ -e "/proc/sys/vm/drop_caches" ] && {
			sync
			echo 3 > /proc/sys/vm/drop_caches
		}
	}

	while read LINE; do {
		case $LINE in
			MemFree:*)
				set $LINE
				MEM=$2
			;;
			Buffers:*)
				set $LINE
				MEM=$(( ($MEM + $2) * 1024 ))
			;;
		esac
	} done </proc/meminfo

	echo "${OPTION}${MEM}"
}

_system_ram_size()		# [kBytes]
{
	local option="$1"	# e.g. is_lowram
	local mem line
	local lowram_border="16384"

	while read line; do {
		case "$line" in
			MemTotal:*)
				set $line

				case "$option" in
					is_lowram)
						test $2 -le $lowram_border
					;;
					*)
						echo "$2"
					;;
				esac

				return
			;;
		esac
	} done </proc/meminfo
}

_system_flash_mounted_readonly ()	# SENS: check if data-partition is mounted read-only (failsafe or firmware-update-mode)
{
	local FUNC="flash_mounted_readonly"
	local LINE

	mount | while read LINE; do {
	
		set $LINE
	
		[ "${5}${6}" = "mini_fo(ro)" ] && {
			_log do $FUNC daemon info "data-partition mounted read-only"
			return 0
		}
	} done
	
	return 1
}
