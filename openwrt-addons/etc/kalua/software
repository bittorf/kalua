#!/bin/sh

_software_show_packages_recent()
{
	local line package time diff humanreadable lookaround
	local time_now="$( _system date unixtime )"
	local time_built="$( $OPKG status kernel | grep ^"Installed-Time:" | cut -d' ' -f2 )"

	$OPKG status | while read line; do {
		case "$line" in
			"Package:"*)
				package="${line#*: }"
			;;
			"Installed-Time:"*)
				time="${line#*: }"
				diff=$(( $time_now - $time ))
				humanreadable="$( _stopwatch seconds2humanreadable "$diff" )"
				lookaround=$(( $time - $time_built ))
				[ $lookaround -gt -60 -a $lookaround -lt 60 ] && {
					humanreadable="$humanreadable = builtin"
				}

				echo "$time - $diff sec ($humanreadable) - $package"
			;;
		esac
	} done | sort
}

_software_make_free_space ()
{
	local FUNC="software_make_free_space"
	local SPACE_WISH="$1"			# [kilobyte]
	local KEYWORD="$2"			# 'ruthless'
	local FREE=0
	local OFFSET=100			# fixme! use that
	local IPK

	return 0	# fixme!

	[ "$( _system flash_free )" -gt $SPACE_WISH ] && return

	for IPK in $( _software show_installed_backwards ); do {
	
		FREE="$( _system flash_free )"
		[ $FREE -gt $SPACE_WISH ] && break

		_log do $FUNC daemon info "now $FREE kb (wish: $SPACE_WISH kb)"
	
		_software is_essential $IPK $KEYWORD || {		# prevents chicken egg-problem
			_log do $FUNC daemon alert "removing '$IPK'"
			_software package_remove $IPK
		}
	} done
}

_software_is_essential ()	# fixme! how to determine, if package is part of a meta-package? maybe this
{				#	 doesn't matter, removing meta-packages doesn't effect child-packages
	local PACKAGE="$1"
	local KEYWORD="$2"
	local VAR
	
	[ "$KEYWORD" = "ruthless" ] && return 1
	
	case $PACKAGE in
		  freifunk-dnsmasq) return 0 ;;		# important for wifi-dhcp
		  	   dnsmasq) return 0 ;;		# important for wifi-dhcp
		freifunk-pppoecd-*) return 0 ;;		# PPPoE / pppox / generic
	 		   pppoecd) return 0 ;;		# PPPoE only
		      kmod-madwifi) return 0 ;;		# atheros
		             iwlib) return 0 ;;		# atheros
		    wireless-tools) return 0 ;;		# atheros
		     madwifi-tools) return 0 ;;		# atheros
				ip) return 0 ;;		# base
			   robocfg) return 0 ;;		# better leave it, otherwise monitoring installs it every 15mins
			  wificonf) return 0 ;;		# base
			    kernel) return 0 ;;		# base
			base-files) return 0 ;;		# base
		 freifunk-webadmin) return 0 ;;		# base
		   freifunk-upload) return 0 ;;		# base
		  freifunk-mtdkill) return 0 ;;		# base
		    freifunk-rdate) return 0 ;;		# base
		    freifunk-olsrd) return 0 ;;		# base
			  dropbear) return 0 ;;		# base
		       busybox-awk) return 0 ;;		# base
			 wl|wl-adv) return 0 ;;		# base/emergency_wifi_situations
			sshpubkeys) return 0 ;;		# in autoupgrade list
			mysettings) return 0 ;;		# in autoupgrade list
			  mydesign) return 0 ;;		# in autoupgrade list
		  fff-adblock-list) return 0 ;;		# in autoupgrade list
	     fff-missing-conntrack) return 0 ;;		# if installed, better leave them
	 freifunk-iptables-missing) return 0 ;;		# if installed, better leave them
			iptables-*) return 0 ;;		# fixme! better dynamically (de-)install (un-)used modules -> _ipt()
			    kmod-*) return 0 ;;		# fixme! better dynamically (de-)install (un-)used modules -> _insmod()
		
							# fixme! allow removing of vtund, if fff_vpn_active=0 ?

		 freifunk-dyndns-*) for VAR in username password domain service ; do {			# all vars filled?
						[ -z "$( uci -q get ddns.myddns.$VAR )" ] && return 1
		 		    } done
		 		    return 0	# yes!
				;;	 
				*)
					[ "$( uci -q get system.@weblogin[0].enabled )" = "1" ] && {

						case $PACKAGE in
		                 			xyssl) return 0 ;;
		                      fff-layer7-descriptions) return 0 ;;
				      freifunk-secureadmin-de) return 0 ;;
		                      		      xrelayd) return 0 ;;
						   busybox-nc) return 0 ;;
						esac

						case "$( uci -q get system.@profile[0].name )" in
							monami*)
								case $PACKAGE in
									freifunk-olsr-viz-*) return 0 ;;
								esac
							;;
						esac
					}
		;;
	esac
	
	return 1
}

_software_show_installed ()
{
	local LINE

	$OPKG status |
	 sed -ne 's/^Package: \(.*\)/\1/p' |
	  while read LINE; do {
	  	echo -n "$LINE "
	  } done
}

_software_show_installed_backwards ()	# OUT1: list
{
	local LINE

	$OPKG status |
	 sed -n 's/^Package: \(.*\)/\1/p' |
	  sed '1!G;h;$!d' |
	   while read LINE; do {
	   	echo -n "$LINE "
	   } done
}

_software_repos_list_files ()	# OUT1: list
{
	cat /usr/lib/*pkg/lists/* 2>/dev/null || {
		echo
		return 1
	}
}

_software_repos_update ()	# fixme! no update during low flash?
{
	local FILE_LAST_FETCH="/tmp/software_last_repository_update"
	local UNIXTIME_UPDATE=0
	local UNIXTIME_NOW="$( _system date unixtime )"
	
	  if [ "$( _software repos_list_files | wc -l )" -lt 100 ]; then
	  
	  	UNIXTIME_UPDATE=0

	elif [ -e $FILE_LAST_FETCH ]; then
	  
		UNIXTIME_UPDATE="$( cat $FILE_LAST_FETCH )"
	else
		UNIXTIME_UPDATE=0
	fi
	
	[ $(( ${UNIXTIME_NOW:-0} - ${UNIXTIME_UPDATE:-0} )) -gt 1800 ] && {
		$OPKG update
		echo $UNIXTIME_NOW >$FILE_LAST_FETCH
	}
}

_software_repos_purge ()
{
	_log do purge_repos daemon debug "flash free: $( _system flash_free ) kb"
	rm -f /usr/lib/*pkg/lists/*
	_log do purge_repos daemon debug "flash free: $( _system flash_free ) kb (after purging)"
}

_software_package_status()
{
	local name="$1"

	$OPKG status "$name"
}

_software_package_info()
{
	local name="$1"

	$OPKG info "$name"
}

_software_package_files()
{
	local name="$1"

	$OPKG files "$name"
}

_software_package_remove()
{
	local funcname='software_package_remove'
	local name="$1"

	_log do $funcname daemon debug "'$name'"
	$OPKG remove "$name"
	sync				# sometimes it needs some time to really free the jffs2-space

	_software install_or_deinstall_hook "$name"
}

_software_package_is_installed ()
{
	local PACKAGE="$1"
	local OUT="$( $OPKG status "$PACKAGE" | fgrep "Status:" )"

	case "$OUT" in
		"Status: install ok installed") : ;;
		"Status: install hold installed") : ;;
		"Status: install user installed") : ;;
		*) return 1 ;;
	esac
}

_software_package_is_not_installed ()
{
	local PACKAGE="$1"

	if _software package_is_installed "$1" ; then
		return 1
	else
		return 0
	fi
}

_software_install_or_deinstall_hook ()
{
	local PACKAGE="$1"

	# reboot-command is lost/deleted/bad ("$OPKG install login-utils")
	[ ! -e /sbin/reboot ] && {
		_log do command_reboot_faulty daemon crit "symlinking to /rom/sbin/reboot"
		ln -s /rom/sbin/reboot /sbin/reboot                                           
	}

	[ -z "$( date 2>/dev/null )" ] && {
		_log do command_date_faulty daemon crit "symlinking to busybox"                                       
		rm /bin/date                                                                                                        
		ln -s busybox /bin/date                                                   
		_log do command_date_faulty daemon crit "date output now: '$(date)'"                                                                                          
	}
}

_software_packages_install ()
{
	local PACKAGE_NAME="$1"
	
	_software package_install		$PACKAGE_NAME	# fixme! better names for package_install <-> packages_install
	_software install_or_deinstall_hook	$PACKAGE_NAME
	_software package_is_installed		$PACKAGE_NAME || return 1

	return 0
}

_software_package_upgrade ()	# fixme! /usr/sbin/cron.upgrade_packages
{
	local PACKAGE_NAME="$1"
	local PACKAGE_VERSION_HERE=0
	local PACKAGE_VERSION_REPO=0

	echo
}

_software_package_version ()
{
	local PACKAGE_NAME="$1"
	local VERSION="$( $OPKG status "$PACKAGE_NAME" | sed -n 's/^Version: \(.*\)/\1/p' | tail -n1 )"

	[ -n "$VERSION" ] && {
		echo $VERSION
		return
	}

	return 1
}

_software_package_newer_version ()	# compare the values and return the newer one
{
	local VERSION_A="$1"
	local VERSION_B="$2"

	  if [ "$( _software version_normalize $VERSION_A )" -gt "$( _software version_normalize $VERSION_B )" ]; then

		echo -n "$VERSION_A"

	elif [ "$( _software version_normalize $VERSION_B )" -gt "$( _software version_normalize $VERSION_A )" ]; then

		echo -n "$VERSION_B"
	fi
}

_software_version_normalize ()
{
	local VERSION="$1"
	local X Y Z N

	# bash can't calculate with floats, so we normalize to 100.000.000, e.g.:
	#
	# v  X.  Y.  Z
	# v  1.222.333 -> 001222333 (2 dots)
	# v111.222.333 -> 111222333 (2 dots)
	# v  4.222     -> 004222000 (1 dot)
	# v  5         ->   5000000 (0 dots)

	local DOTS="$( echo -n $VERSION | sed 's/[^\.]//g' )"
	
	case "${#DOTS}" in
		0)
			X="$VERSION"
		;;
		1)
			X=${VERSION%[.]*}
			Y=${VERSION#*.}
		;;
		2)
			N=${VERSION%[.]*}
			X=${N%[.]*}
			
			N=${VERSION#*.}
			Y=${N%[.]*}
			Z=${N#*.}
		;;
	esac

	for N in "$X" "$Y" "$Z"; do {
	
		case ${#N} in
			0)
				echo -n "000"
			;;
			1)
				echo -n "00$N"
			;;
			2)
				echo -n "0$N"
			;;
			*)
				echo -n "${N:=000}"
			;;
		esac
	} done
}

_software_package_is_installed_lowlevel ()	# OUT1: 0 = not_installed , 1 = installed , 2 = not in repo
{
	local PACKAGE="$1"
	local FUNC="software_package_is_installed_lowlevel"

	_software package_is_installed "$PACKAGE" && {
		echo -n 1
		_log do $FUNC daemon info "'$PACKAGE' installed ok"
		return 0
	}

	$OPKG list | grep -q ^"$PACKAGE " && {
		echo -n 0
		_log do $FUNC daemon info "'$PACKAGE' not installed, but listed in repo"
		return 0
	}

	echo -n 2
	_log do $FUNC daemon info "'$PACKAGE' not in repository this time"
}

_software_package_install()
{								# fixme! sometimes libopenssl isn't correct installed,
	local PACKAGE="$1"					# and vtund claims to make an "bus error". We have to
	local FUNC="software_package_install"			# double-check this and e.g. reinstall - CRC-test?
	local SLEEP="120"					# look at S52vpn check_for_correct_install()
	local KEYWORD="$2"	# noautorepoupdate
	local COMMAND

	[ "$( uci -q get system.@system[0].noswinstall )" = "1" ] && {
		_log do $FUNC daemon info "No software installation allowed by owner of this device"
		return 1
	}
                                                            
        while true; do {
		_net inet_seems_stable && break
		_log do $FUNC daemon debug "no default-route found, waiting $SLEEP seconds"
		sleep $SLEEP
	} done

	_log do $FUNC daemon info "installing '$PACKAGE' (free space: $( _system flash_free ) Kilobyte)"
	[ -z "$KEYWORD" ] && _software repos_update

	if [ -e '/bin/opkg' ]; then
		do_install ()
		{
			$OPKG remove $PACKAGE
			$OPKG install $PACKAGE
		}
	else
		do_install ()
		{
			$OPKG -force-defaults install $PACKAGE
		}
	fi

	if do_install ; then
		_log do "$FUNC" daemon info "'$PACKAGE' install seems fine (free space: $( _system flash_free ) Kilobyte)"

		case $PACKAGE in			# fixme! move these into hook()
			loginutils)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					rm -f /sbin/halt
					ln -s /rom/sbin/reboot /sbin/reboot
				}
			;;
			freifunk-pppoecd-de)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_system reboot_safe "$PACKAGE was installed"	# fixme! maybe just 'ifup wan' ?
				}
			;;
			kmod-ide)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_system reboot_safe "$PACKAGE was installed"	# fixme! maybe just reload modules?
				}
			;;
			dropbear)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_ssh start
					pidof dropbear >/dev/null && {
						pidof telnetd >/dev/null && {
							killall telnetd
						}
					}
				}
			;;
			*fff-adblock-list*)
				[ "$( _software package_is_installed_lowlevel "fff-adblock-list" )" = "1" ] && {
					/etc/init.d/S43ethers_fff+ start
				}
			;;
		esac
		
		_software install_or_deinstall_hook $PACKAGE
		return 0
	else
		_log do $FUNC daemon info "'$PACKAGE' install failed (free space: $( _system flash_free ) Kilobyte)"
		return 1

		# fixme! do cleanup, e.g. remove '/tmp/mydesign_0.2_29132.ipk'
	fi
}
