#!/bin/sh

_vpn_innercity_master_vtund_write_config()
{
  local config="${1:-/tmp/vtund.conf}"
  local password="${2:-ff}"
  local node=2
  local node_max=1024

  # defaults to 'proto tcp'
  cat >"$config" <<EOF
default {
  type ether ;
  compress no ;
  encrypt no ;
  keepalive yes ;
  multi killold ;
  stat no ;
}
EOF

  while [ $node -lt $node_max ]; do {

    cat >>"$config" <<EOF

Node$node {
  device tap$node ;
  passwd $password ;

  up {   program ". /tmp/loader; _vpn; _vpn innercity_master_iface up   %%" wait; } ;
  down { program ". /tmp/loader; _vpn; _vpn innercity_master_iface down %%" wait; } ;
}
EOF
    node=$(( node + 1 ))
  } done
}

_vpn_innercity_master_vtund()
{
  local funcname='vpn_innercity_master_vtund'
  local action="$1" # check_on_server|get_port|fire|start|stop|restart
  local config="${2:-/tmp/vtund.conf}"
  local line port

  case "$action" in
    check_on_server)
      if [ -e "$config" ]; then
        if pidof vtund >/dev/null; then
          lsof | fgrep '/dev/net/tun' | grep -q ^'olsrd' && {
            line="$( ps ax | grep 'vpn_innercity_master_iface up' | grep -v 'grep' )"
            [ -n "$line" ] && {
              _log do $funcname daemon alert "hanging task: $line"
              set -- line
              kill $1
            }

            _olsr daemon restart 'blocked /dev/net/tun'
          }
        else
          _log do $funcname daemon alert "$action: empty pid - will startup"
          _vpn innercity_master_vtund fire
        fi
      else
        _vpn innercity_master_vtund start
      fi
    ;;
    get_port)
      port="$( uci -q get system.vpn.port )"
      echo "${port:-5001}"
    ;;
    fire)
      port="$( _$funcname get_port )"
      /usr/local/sbin/vtund -f "$config" -P "$port" -s
    ;;
    start)
      _vpn innercity_master_vtund_write_config
      _vpn innercity_master_vtund fire
    ;;
    stop)
      _watch hanging_command vtund
      _watch hanging_command vtund
      rm "$config"
    ;;
    restart)
      _vpn innercity_master_vtund stop
      _vpn innercity_master_vtund fire
    ;;
  esac
}

_vpn_innercity_master_iface()
{
  local funcname='vpn_innercity_master_iface'
  local action="$1" # up|down
  local dev="$2"    # e.g. tap276
  local i=0
  local bytes packets uptime uptime_sec numbers

  while ! mkdir "/tmp/lock-$funcname"; do {
    i=$(( i + 1 ))
    [ $i -gt 5 ] && _log do $funcname daemon info "locked: $action/$dev must wait for '$( cat "/tmp/lock-$funcname/info" )'"
    sleep 1
  } done
  echo "action: $action dev: $dev" >"/tmp/lock-$funcname/info"
  _log do $funcname daemon info "[START] action: $action dev: $dev"

  local olsrd_config='/etc/olsrd.conf'
  local remote_nodenumber="${dev//tap/}"    # tap276 -> 276
  local tunnel_ip_here="$( _ipsystem getvar 'WIFIVPNSERVERADR' $remote_nodenumber )"
  local limit=8   # throttling - FIXME! use olsr_throttle?
  local limit_burst=5
  local mask=30   # ip here + ip other side + net + broadcast = 4 = /30
  local mtu=1450    # why? example-conf does it too
        # see: http://sourceforge.net/p/vtun/mailman/message/27935441/

  if [ "$action" = 'up' ]; then
    ip address add $tunnel_ip_here/$mask dev $dev
    ip link set dev $dev mtu $mtu up
    touch "/tmp/$funcname-devup-$dev"

    $IPT -I INPUT  -p udp --dport 698 -i $dev -j DROP
    $IPT -I INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
    $IPT -I INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
    $IPT -I OUTPUT -p udp --dport 698 -o $dev -j DROP
    $IPT -I OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
    $IPT -I FORWARD -i $dev -j ACCEPT
    $IPT -I FORWARD -o $dev -j ACCEPT

    mkdir '/tmp/FREIFUNK_TUNNEL' && {
      $IPT -t nat -I POSTROUTING -s 10.0.0.0/8 ! -d 10.0.0.0/8 -j MASQUERADE
      # TODO: activate forwarding in kernel
    }

    # if we cannot find the interface name, insert it
    # only do it for 1st occurence - and dont touch 'private' sections
    grep -q "\"$dev\"" "$olsrd_config" || {
      linenumber="$( grep -n ^'Interface ' | head -n1 | cut -d':' -f1 )"
      sed -i "${linenumber}s/Interface /Interface \"$dev\" /" "$olsrd_config"
      _olsr daemon restart "new interface '$dev' added"
    }
    pidof olsrd >/dev/null || _olsr daemon start "$funcname() not active yet"

    _log do $funcname daemon info "[READY] action: $action dev: $dev"
  else
    ip link set dev $dev down

    uptime_sec=$( _file age "/tmp/$funcname-devup-$dev" )
    uptime=$( _stopwatch seconds2humanreadable "$uptime_sec" )
    rm "/tmp/$funcname-devup-$dev"

    set -- $( $IPT -nxvL | fgrep " $dev " | head -n1 )
    packets=$1
    bytes=$2
    $IPT -D FORWARD -o $dev -j ACCEPT

    set -- $( $IPT -nxvL | fgrep " $dev " | head -n1 )
    packets=$(( packets + $1 ))
    bytes=$(( bytes + $2 ))
    $IPT -D FORWARD -i $dev -j ACCEPT

    $IPT -D OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
    $IPT -D OUTPUT -p udp --dport 698 -o $dev -j DROP
    $IPT -D INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
    $IPT -D INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
    $IPT -D INPUT  -p udp --dport 698 -i $dev -j DROP

    numbers="bytes/packets: $( _sanitizer do "$bytes/$packets" number_humanreadable ) = $(( bytes / uptime_sec / 1000 )) KB/s"
    _log do $funcname daemon alert "[READY] action: $action dev: $dev $numbers uptime: $uptime"
  fi

  rm -fR "/tmp/lock-$funcname"
}

_vpn_needed()
{
	[ -z "$INETOFFER" ] && INETOFFER="$( _net local_inet_offer )"

	[ "$INETOFFER" = "false" -a -z "$( uci -q get system.@vpn[0].force )" ] && {
		_log do $FUNC daemon debug "no local default gateway - abort"
		return 1
	}

	[ "$( uci -q get system.@vpn[0].enable )" = "1" ] || {
		_log do $FUNC daemon debug "vpn disabled by config - abort"
		return 1
	}
}

_vpn_start ()
{
	local FUNC="vpn_start"
	_vpn_defer_start
	_vpn needed || return 1
	_vpn_build_vars

	[ -n "$SERV" ] || {
		_log do $FUNC daemon debug "no suitable server found"
		return 1
	}
	
	[ -n "$PORT" ] || {
		_log do $FUNC daemon debug "no server with suitable vtun setup found for you, please try again later"
		return 1
	}
	
	[ -z "$NODE_NUMBER" ] && {
		_log do $FUNC daemon debug "node not configured yet - abort"
		return 1
	}
		
	_vpn_remove_vtun_conf
	_vpn_write_vtun_conf
	_vpn_tunnel_start
}

_vpn_stop ()
{
	_vpn_build_vars "stop"
	_vpn_remove_vtun_conf
	_vpn_tunnel_stop
	
}

_vpn_restart ()
{
	_vpn_stop
	_vpn_start
}

_vpn_get_static_route ()			# prevents tunneling over mesh, when local defgw gets broken
{
	local DEFAULT_GATEWAY_IP="$( ip route list exact 0.0.0.0/0 | head -n1 | cut -d" " -f3 )"
	
	#[ -n "$( uci -q get system.@vpn[0].force )" ] && return
	
	case $INETOFFER in
		lan)
			echo -n "$DEFAULT_GATEWAY_IP dev $LANDEV"
		;;
		pppoe)
			echo -n "$( ip route list exact 0.0.0.0/0 dev pppoe-wan | head -n1 | cut -d" " -f3 ) dev pppoe-wan"
		;;
		*)
			echo -n "$DEFAULT_GATEWAY_IP dev $WANDEV"
		;;
	esac
}

_vpn_tunnel_stop ()
{
	local FUNC="vpn_tunnel_stop"
	
	pidof vtund >/dev/null && {

		_log do $FUNC daemon debug "killing tunnel-daemon"		
		killall vtund
		sleep 2
	
		pidof vtund >/dev/null && {

			_log do $FUNC daemon debug "daemon still alive, trying hard"
			killall -9 vtund
			sleep 2
			
			pidof vtund >/dev/null && {

				_log do $FUNC daemon debug "daemon still alive - error"
			}
		}
	}
}

_vpn_tunnel_start ()
{
	local FUNC="vpn_tunnel_start"
	[ -n "$PORT" ] && {
		PORT="-P $PORT"
	}
	
	[ ! -e "$VTUN" ] && {
		_log do $FUNC daemon debug "no configfile - abort"
		return
	}
	
	
	_log do $FUNC daemon debug "starting vtun with config '$VTUN'"

	vtund -f "$VTUN" "Node$KNOT" "$SERV" "$PORT" 2>/dev/null || {

		_log do $FUNC daemon debug "error"	
		
		if _software package_is_not_installed vtun ; then
		
			_log do $FUNC daemon debug "vtund and/or kmod-tun not installed"
		
		else
			vtund - 2>/dev/null | grep -q -i vtun || {
			
				_log do $FUNC daemon debug "vtund is installed, but has an serious problem"

			}
		fi
		
		return 1	# cron trys later a vpn-restart
	}
}

_vpn_write_vtun_conf()
{
	local func="vpn_write_vtun_conf"
	local LINE=""
	local STATIC_ROUTE="$( _vpn_get_static_route )"
	local particpant_net="10.63.0.0/16"			# fixme! hardcoded
	local mytable="weimarnetz_anonym"
	local anonym

	[ -n "$( uci -q get system.@vpn[0].anonym )" ] && {
		anonym="# (inactiv):"
	}

	cat > "$VTUN" <<EOF
Node$KNOT {
	passwd ff ;
	type ether ;		# fixme! olsrd-bug: /32 interface needed?
	persist yes ;		# fixme! add 'timeout 60' ?

	up {
		program "logger -p daemon.info -t vtund.conf link_up %%:$HOSTNAME" ;

		program "ip address add $WIFIVPNCLIENTADR/$WIFIVPNPRE dev %% " wait ;
		program "sleep 10" wait;
		program "ip address add $WIFIVPNCLIENTADR/32 dev %%" wait;
		program "ip -6 address add $VPN6ADR/$VPN6MSK dev %%" wait;
		program "ip link set dev %% mtu $MTU up" wait;
		program "ip route add $VPN_SERVER via $STATIC_ROUTE" wait;		# + table local?

		program "grep -q $mytable /etc/iproute2/rt_tables || echo 50 $mytable >>/etc/iproute2/rt_tables" wait;
		program "$anonym ip rule add from $particpant_net prio 30010 table $mytable" wait;

		# dont send packets to private networks over vpn
		program "$anonym ip rule add to 169.254.0.0/24 prio 30005 lookup main" wait;
		program "$anonym ip rule add to 10.0.0.0/8     prio 30004 lookup main" wait;
		program "$anonym ip rule add to 192.168.0.0/16 prio 30003 lookup main" wait;
		program "$anonym ip rule add to 172.16.0.0/12  prio 30002 lookup main" wait;
		#
		program "$anonym ip rule add to $particpant_net prio 30001 lookup main" wait;
		program "$anonym ip rule add from $LANNET/$LANPRE prio 30000 table main" wait;
		program "$anonym ip route add default via $WIFIVPNSERVERADR dev %% table $mytable" wait;

		program "$anonym ip route flush cache" wait;
		program ". /tmp/loader; _vpn include; _vpn blocking remove" wait;
	} ;
		# fixme! static_route must only be valid for programs on this machine
	down {
		program "logger -p daemon.info -t vtund.conf link_down %%:$HOSTNAME" ;

		# ordering vice versa (see above)
		program "$anonym ip route del default via $WIFIVPNSERVERADR dev %% table $mytable" wait;
		program "$anonym ip rule del from $LANNET/$LANPRE prio 30000 table main" wait;
		program "$anonym ip rule del to $particpant_net prio 30001 lookup main" wait;
		#
		program "$anonym ip rule del from 172.16.0.0/12 prio 30002 table $mytable" wait;
		program "$anonym ip rule add to 192.168.0.0/16 prio 30003 lookup main" wait;
		program "$anonym ip rule add to 10.0.0.0/8     prio 30004 lookup main" wait;
		program "$anonym ip rule add to 169.254.0.0/24 prio 30005 lookup main" wait;

		program "ip route del $VPN_SERVER via $STATIC_ROUTE" wait;
		program "ip link set dev %% down" wait;
		program ". /tmp/loader; _vpn include; _vpn blocking start_after_all_connections_are_broken" wait;
	} ;
}
EOF

	_log do $func daemon debug "ready"
	while read LINE; do {
		_log do $func daemon debug "${VTUN} +'$LINE'"
	} done <"$VTUN"
}

_vpn_block()
{
	local funcname='vpn_block'
	local option="$1"	# start|remove|start_after_last_client

	case "$option" in
		'start_after_all_connections_are_broken')
			grep -q 'tap.:' '/proc/net/dev' || {
				option='start'
				_log do $funcname daemon info 'no connection active'
			}
		;;
	esac

	case "$option" in
		'start')
			bool_true 'system.vpn.force_block_wifi' && {
				_log do $funcname daemon info 'start: wifi'
				$IPT -I FORWARD ! -i $LANDEV -j REJECT
			}

			bool_true 'system.vpn.force_block_lan' && {
				_log do $funcname daemon info 'start: lan'
				$IPT -I FORWARD   -i $LANDEV -j REJECT
			}
		;;
		'remove')
			bool_true 'system.vpn.force_block_wifi' && {
				_log do $funcname daemon info 'remove: wifi'
				$IPT -D FORWARD ! -i $LANDEV -j REJECT
			}

			bool_true 'system.vpn.force_block_lan' && {
				_log do $funcname daemon info 'remove: lan'
				$IPT -D FORWARD   -i $LANDEV -j REJECT
			}
		;;
	esac
}

_vpn_remove_vtun_conf ()
{
	local FUNC="vpn_remove_vtun_conf"

	[ -e "$VTUN" ] && {
		_log do $FUNC daemon debug "working"
		rm "$VTUN"
	}
}

_vpn_defer_start ()
{
	DIRTY=
	[ "$( uci -q get system.@vpn[0].active )" = "0" ]	&& DIRTY="system.@vpn[0].active set to 0"
	[ -e "/tmp/LOWMEM" ]				&& DIRTY="lowmem"
	[ -n "$FAILSAFE" ]				&& DIRTY="failsafe"
	[ -n "$READONLY" ]				&& DIRTY="readonly"
	[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]	&& DIRTY="software not fully installed"

	[ -n "$DIRTY" ] && {
		_log do init daemon debug "call: '$1' - abort: '$DIRTY'"
		exit
	}
}

_vpn_probe_vtund_type ()
{
	set -- $( ldd /usr/sbin/vtund )

	case "$@" in
		*'liblzo'*'libcrypto'*)
			echo "ssl_lzo"
		;;
		*'liblzo'*)
			echo "nossl_lzo"
		;;
		*)
			echo "nossl_nolzo"
		;;
	esac
}

_vpn_build_vars ()
{

  local FUNC="vpn_build_vars"

  # load json lib
  . /usr/share/libubox/jshn.sh

  # ex: weimarnetz.de
  DOMAIN="$( uci -q get system.@vpn[0].domain )"
  # ex: vpn
  PREFIX="$( uci -q get system.@vpn[0].prefix )"
  # ex: /freifunk/vpn/
  JSONPATH="$( uci -q get system.@vpn[0].jsonpath )"
  # ex: nossl_nolzo
  VTUNDTYPE="$( _vpn probe_vtund_type )"

  # ugly hack
  local TABLE=

  for i in $(seq 1 10) 
  do
    HOST="${i}.${PREFIX}.${DOMAIN}"
    URL="http://${HOST}${JSONPATH}"
    if ! JSON=$( _wget do "${URL}" 2>/dev/null ); then
      _log do ${FUNC} daemon err "error fetching ${URL}"
    else
       json_cleanup # json_get_var variables are not cleaned otherwise.
       json_load "${JSON}" 2>/dev/null
       SERVER=     json_get_var SERVER server
       CLIENTS=-1  json_get_var CLIENTS clients
       MTU=-1      json_get_var MTU maxmtu
       PORT=-1     json_get_var PORT port_vtun_${VTUNDTYPE}

       PING="$( _net ping_getlatency "${SERVER}" )";
       if [ -z "${PING}" ]; then
	    _log do $FUNC daemon info "ping not possible"
       elif [ -n "${SERVER}" \
              -a "${CLIENTS}" -ge 0 \
              -a "${MTU}" -ge 0 \
              -a "${PORT}" -ge 0 \
              -a -n "${PING}" \
              2>/dev/null ]; 
            then
             _log do ${FUNC} daemon notice "got ${SERVER} - ping: ${PING}ms"
             TABLE="${TABLE};${PING} ${i} ${CLIENTS} ${MTU} ${PORT} ${SERVER}"
       else
            _log do ${FUNC} daemon err "error: invalid data on ${URL}"
       fi
    fi
  done

# no vpn, then exit early
[ -n "${TABLE}" ] || return 1

# get VPN with lowest latency
# warning: leading spaces somehow break this
read PING NUMBER CLIENTS MTU PORT SERVER <<EOF 
  $( echo ${TABLE} | tr ';' '\n' | sed '/^$/d' | sort -n | head -n1 ) # TODO?
EOF

 VPN_SERVER="${SERVER}"

 _log do ${FUNC} daemon notice "using ${VPN_SERVER} - ping: ${PING}ms  clients: ${CLIENTS}  port: ${PORT}  mtu: ${MTU}"
 NODE_NUMBER="$( uci -q get system.@profile[0].nodenumber )"
 HOSTNAME="$( uci -q get system.@system[0].hostname )"
 [ -z "${HOSTNAME}" ] && HOSTNAME="node${NODE_NUMBER}"
 SERV="${VPN_SERVER}"	# _ip4|_ip6 fallback?
 CONF="/var/etc/olsrd.conf"			# old_style
 KNOT="${NODE_NUMBER}"
 VTUN="/tmp/vtund.conf"

 [ "${1}" != "stop" ] && INETOFFER="$( _net local_inet_offer )"
	
 eval "$( _ipsystem do )"
}


_vpn_proto ()						# defaults to 'olsr'
{
	local PROTO="$( uci -q get system.@vpn[0].proto )"
	
	echo -n "${PROTO:-olsr}"			# fixme! none,olsr,batman,batman-adv,...
}
