#!/bin/sh

_file_time()
{
	local file="$1"
	local option="$2"	# unixstamp|humanreadable

	if [ -e "$file" ]; then
		case "$option" in
			'unix'*)
				date +%s -r "$file"
			;;
			'human'*)
				_system date unixtime2date "$( date +%s -r "$file" )"
			;;
		esac
	else
		echo '0'
	fi
}

_file_age()		# FIXME! 1970 -> better use uptime?
{
	local file="$1"
	local option="$2"		# e.g. 'sec' or '-gt' (greater than)
	local option_args="$3"		# e.g. 3600

	local unixtime_file=$( _file 'time' "$file" unixstamp )
	local age=$(( $( _system date unixtime ) - unixtime_file ))	# [seconds]

	case "$option" in
		humanreadable)
			_stopwatch seconds2humanreadable "$age"
		;;
		humanreadable_verbose)
			if [ $age -gt 1800 ]; then
				echo "$( _stopwatch seconds2humanreadable "$age" ) @ $( _system date unixtime2date "$unixtime_file" )"
			else
				_stopwatch seconds2humanreadable "$age"
			fi
		;;
		'-'*)
			# -gt 3600
			test "$age" $option $option_args
		;;
		sec|*)
			echo "$age"
		;;
	esac
}

_file_convert_bin2hex ()	# using hexdump, to output eachs byte hex-representation
{				# and throw away thrash + linebreaks
	local file="$1"
	local line

	hexdump -C "$file" |
	 sed -n 's/^[0-9a-f]*\([0-9a-f ]*\)|.*/\1/p' |
	  sed -e 's/ //g' |
	   while read line; do {
		echo -n "$line"
	   } done
}

_file_convert_hex2bin ()
{
	local file="$1"

	if [ -e /www/cgi-bin/freifunk-upload ]; then

		/www/cgi-bin/freifunk-upload -a2b <"$file"
	else
		local hexbyte

		while read -n 2 hexbyte; do {
			printf "\\$( printf "%o" 0x$hexbyte )"
		} done <$file
	fi
}

_file_size ()	# if we have a busybox without 'stat'-command compiled
{		# ls is much faster, than a 'wc -c /path/to/10mb-file'

	local FILE="$1"
	local UNIT="$2"

	_fsize ()
	{
		ls -la "$1" 2>/dev/null | sed -n 's/^[^0-9]*[0-9]*[a-zA-Z ]*\([0-9]*\).*/\1/p' || {
			_log do file_size daemon crit "file '$FILE' does't exist"	# fixme! is never reached
			return 1
		}
	}

	# bug, when user/group is numeric:
	# root@oss47dach:~ _file size "/etc/init.d/S54batman_fff+"
	# 1000
	# root@oss47dach:~ ls -l /etc/init.d/S54batman_fff+
	# -rwxr-xr-x    1 1000     1000            0 Jan  3 16:50 /etc/init.d/S54batman_fff+

	[ -n "$UNIT" ] && {	# needs forking
	
		OUT="$( _fsize "$FILE" )"
		
		case $UNIT in
			kb)
				echo -n "$(( ${OUT:-0} / 1024 ))"
			;;
			*)
				echo -n "$OUT"
			;;
		esac
		
		return
	}

	_fsize "$FILE" || return 1
}

_file_lines ()		# fixme! output of 0 only works, if file does not exist, but not when really 0 bytes
{
	sed -n '$=' "$1" 2>/dev/null || echo "0"	# same like 'cat nonexistingFILE | wc -l' but nonforking
}

_file_hash ()
{
	local FILE="$1"
	
	md5sum "$FILE" 2>/dev/null | cut -d' ' -f1
}

_file_discusage ()		# [bytes]
{
	local DIR="$1"
	local I=0		# byte-counter

	[ -z "$DIR" ] && DIR="$( pwd )"		# we are lazy on cmdline

	eval "$( ls -lR "$DIR" | sed -n '/^-/s/^[^0-9]*[0-9]*[a-zA-Z ]*\([0-9]*\).*/I=$(( $I + \1 ));/p' )"
	
	echo $I
}
