#!/bin/sh
. /tmp/loader

# here we guess the gateway and write some info for fast including in "/tmp/GATEWAY_CHECK_RECENT"
# DATE=2011jan24_11:15; HOSTNAME=ejbw-mesh-dhcp-99.olsr; COST_INT=1000; GATEWAY=10.10.99.33; NEXTHOP=192.168.100.22; METRIC=1

test   -e "/tmp/LOWMEM"				&& exit
test   -n "$FAILSAFE"				&& exit
test ! -e "/www/SOFTWARE_FULLY_INSTALLED"	&& exit

_olsr uptime is_short && {
	_log do olsr_uptime_is_short daemon info "[OK] scheduling job"
	_scheduler add "$0" force
	exit
}

# starts NAT if needed (e.g. new WAN-lease)
# later we move this to a hotplug script
_netfilter masquerade_start

# first, get a list of all HNA4 0.0.0.0/0 = gateway offers
# LIST_HNA4="10.63.8.1 10.63.9.1 ..."
# output routes and compare which of these are gateways, 
# output them and sort by cost, lowest on top

LIST_GATEWAYS="$( _olsr gateways_get )"
MINCOST=99999
OUT=

FILE_OLSR_ROUTES="/tmp/olsr_output_recent_routesonly_$$"
START="$( grep -n ^"Table: Routes"$ /tmp/OLSR/ALL | cut -d':' -f1 )"
sed -n "$(( $START + 2 )),999999p" /tmp/OLSR/ALL >$FILE_OLSR_ROUTES

while read LINE; do {

	set ${LINE:-dummy}
	GATEWAY=$1		# is "$IP/32"
	NEXTHOP=$2
	METRIC=$3
	COST=$4

	for IP in $LIST_GATEWAYS; do {
		[ "$IP/32" = "$GATEWAY" ] && {

			if [ "${COST%.*}" = "0" ]; then			# 0.100 -> 100
				COST_INT="${COST#*.}"
			else						# 2.345 -> 2345
				COST_INT="${COST%.*}${COST#*.}"
			fi

			[ $COST_INT -lt $MINCOST ] && {
				MINCOST=$COST_INT
				OUT="COST_INT=$COST_INT; GATEWAY=$IP; NEXTHOP=$NEXTHOP; METRIC=$METRIC"
			}
		}
	} done	

} done <$FILE_OLSR_ROUTES
rm $FILE_OLSR_ROUTES

[ -z "$OUT" ] && {
	# gatewayip from routing table  // fixme! 'default dev tun0  scope link' -> no ip!
	GW="$( _sanitizer do "$( grep ^default /tmp/OLSR/ROUTING_TABLE_MAIN | head -n1 )" ip4 )"

	if   fgrep -sq "$GW;" /tmp/CLIENTS_LAN /tmp/CLIENTS_WAN ; then

		# metric = 0 ! (is in own subnet, without a router intermediate - so we take wifiadress
		OUT="COST_INT=1; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
	elif [ -z "$GW" ]; then

		read LAST_GATEWAY </tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY
		# really no gateway, so we set cost ~INFINITE, invalid nexthop,
		# but OLD gateway - so olsr_plausi_check() should not reboot the box
		# and enforce soon a next test

		OUT="COST_INT=99999; GATEWAY=${LAST_GATEWAY}; NEXTHOP=127.0.0.0; METRIC=-1"

		_log do guess_gateway daemon info "empty default router, last inet-gateway was: $LAST_GATEWAY"
		_scheduler add "$0" force
	else
		# provider-lan with subnet >/24 is not implemented yet (see /etc/init.d/S43...)
		if [ "$WIFIADR" = "$GW" ]; then
			_log do guess_gateway daemon alert "strange situation: olsr-nexthop != routing-table nexthop: $WIFIADR/$GW"
			OUT="COST_INT=10; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
		else
			if [ -e "/tmp/$( basename $0 )_first_error" ]; then
				OUT="COST_INT=10; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"

				case "${WIFIADR}_${CONFIG_PROFILE}" in
					*)
						_log do guess_gateway daemon alert "strange situation: olsr-nexthop != routing-table nexthop: $WIFIADR/$GW"
						_olsr daemon restart "gateway: $GW nexthop: $WIFIADR"

						/etc/init.d/S41build_static_netparam
						/etc/init.d/S43ethers_fff+ build_network_clients
					;;
				esac
			else
				touch "/tmp/$( basename $0 )_first_error"
			fi
		fi
	fi
}

eval $OUT	# GATEWAY 
GATEWAY="$( _sanitizer do "$GATEWAY" ip4 )"		# fixme! this is safer, we have seen something like "10.10.27.33/32" for output...

[ -e "/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY" ] || FIRST_RUN="true"
[ -e "/tmp/USERDB_COPY" ] || FIRST_RUN="true"
[ "$METRIC" = "0" ] && FIRST_RUN=

echo "$COST_INT"	>/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY
echo "$GATEWAY"		>/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY

echo "DATE=$( _system date humanreadable ); HOSTNAME=$( _net ip2dns $GATEWAY ); $OUT"		>/tmp/GATEWAY_CHECK_RECENT

if [ -e "/tmp/service_ssh_nowatching" ]; then
	cp "/tmp/GATEWAY_CHECK_RECENT" "/tmp/ARCHIV_TRACEINET"
else
	cat "/tmp/GATEWAY_CHECK_RECENT" >>"/tmp/ARCHIV_TRACEINET"
	_watch archivsize "/tmp/ARCHIV_TRACEINET" 12 lines_max
fi

_log do guess_gateway daemon debug "$OUT"

[ "$FIRST_RUN" = "true" ] && {
	MESSAGE="startup/$( uci -q get system.@system[0].hostname )/$( _system uptime humanreadable )"
	MESSAGE="$( _sanitizer do "$MESSAGE" urlvalue )"
	_weblogin login_check "" "" "" "$MESSAGE"
}
